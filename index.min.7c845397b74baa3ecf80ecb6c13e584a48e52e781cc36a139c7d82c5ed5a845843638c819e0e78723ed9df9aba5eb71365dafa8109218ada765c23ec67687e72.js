var suggestions=document.getElementById('suggestions');var userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(e){if(e.keyCode===191){e.preventDefault();userinput.focus();}
if(e.keyCode===27){userinput.blur();suggestions.classList.add('d-none');}}
document.addEventListener('click',function(event){var isClickInsideElement=suggestions.contains(event.target);if(!isClickInsideElement){suggestions.classList.add('d-none');}});document.addEventListener('keydown',suggestionFocus);function suggestionFocus(e){const focusableSuggestions=suggestions.querySelectorAll('a');const focusable=[...focusableSuggestions];const index=focusable.indexOf(document.activeElement);let nextIndex=0;if(e.keyCode===38){e.preventDefault();nextIndex=index>0?index-1:0;focusableSuggestions[nextIndex].focus();}
else if(e.keyCode===40){e.preventDefault();nextIndex=index+1<focusable.length?index+1:index;focusableSuggestions[nextIndex].focus();}}
(function(){var index=new FlexSearch({preset:'score',cache:true,doc:{id:'id',field:['title','description','content',],store:['href','title','description',],},});var docs=[{id:0,href:"/docs/challenges/binary/",title:"Binary",description:"Binary challenges for Haaukins Platform",content:"\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#binary\"\u003eBinary\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#difficulty-levels\"\u003eDifficulty Levels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#bittit-account-recovery\"\u003eBittit Account Recovery\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#set-user-id\"\u003eSet User ID\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#format-string-exploitation\"\u003eFormat String Exploitation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#corroption-please\"\u003eCorROPtion, please!\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#shrunk-chunk-heap-overflow\"\u003eShrunk-Chunk Heap Overflow\u003c/a\u003e\n\u003c!-- - [Buffer Overflow](#buffer-overflow) --\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"binary\"\u003eBinary\u003c/h1\u003e\n\n\u003cp\u003eBinary exploitation is the process of subverting a compiled application such that it violates some trust boundary in a way that is advantageous to the attacker. It comes down by abusing vulnerabilities that corrupt memory in software or by finding a vulnerability in the program and exploiting it in order to escalate privileges.\u003c/p\u003e\n\n\u003ch3 id=\"difficulty-levels\"\u003eDifficulty Levels\u003c/h3\u003e\n\n\u003cp\u003eThe levels of difficulty scale is based on the number of steps required in order to solve the\nTraining Challenge\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eVery Easy​:\u003c/strong\u003e It requires just one step in order to get the flag\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEasy:\u003c/strong\u003e​ It requires one-two steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMedium​:\u003c/strong\u003e It requires two-three steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHard:\u003c/strong\u003e ​It requires three-four steps based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVery Hard:\u003c/strong\u003e​ It requires several steps in order to get the flag\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"bittit-account-recovery\"\u003eBittit Account Recovery\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints\u003c/strong\u003e: 27 \u003cstrong\u003eDifficulty\u003c/strong\u003e: Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003cbr /\u003e\n- Improvement of binary exploitation skills, such as overflowing the stack.\n- Getting more comfortable with Assembly code and tools like GDB and objdump.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\u003cbr /\u003e\nThis challenge requires that the user bypasses a nonpermissive program flow in a binary containing an encrypted username and password. A pretend online forum has implemented an \u0026lsquo;alternative\u0026rsquo; account recovery policy. The user downloads the binary from the website, and can then obtain the username and password through binary exploitation. Logging in with these credentials prints the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\u003cbr /\u003e\n- Knowledge about the x86-64 instruction set.\n- Knowledge about GDB or a similar tool.\n- Knowledge about how the stack can be overwritten by exploiting functions like \u003ccode\u003egets()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"set-user-id\"\u003eSet User ID\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 30 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to escalate the privilege and get root access\n- ​Scanning a system to check if programs have specific privileges\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​In this challenge the users will have access to an SSH session in which there\nare a file containing the flag. That file is only readable by user with root privileges. In order to\nsolve the challenge the user will have to find the command for which is set the SUID bit and\nthen escalate privileges in order to open the file containing the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Basic usage of Linux from command line\n- Know Linux user permissions\u003c/p\u003e\n\n\u003c!-- ## Buffer Overflow\n\n**Points:** ​ 20 **Difficulty:** ​Medium\n\n**Learning Objectives:**\n- Learn how the processes are held in the memory\n- Learn how to exploit a buffer overflow through shellcode\n- Learn how to manipulate memory and it’s registers to execute malicious code\n\n**Description:** ​In this challenge the users will have access to an SSH session in which there\nare a file containing the flag. That file is only readable by user with root privileges. The\nchallenge will require the user to find a program which has SUID bit set and is vulnerable to\nbuffer overflow. The main goal is to debug the program in order to find how many bytes are\nnecessary for the buffer to overwrite the instruction pointer and then write some assembly\ncode to get root privileges.\n\n**Prerequisite:**\n- Know what is a buffer overflow\n- Know how to debug a binary file\n- Basic knowledge of Assembly --\u003e\n\n\u003ch2 id=\"format-string-exploitation\"\u003eFormat String Exploitation\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 35 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to read data from the stack using format strings while avoiding memory access violations.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e This challenge is about utilizing a simple format string exploit. A program named FormatString plays a game with the user, who has to guess the password, while the program repeats the user\u0026rsquo;s guesses, using printf() on the input string. As it turns out, printf(), along with similar functions, has the quirk that it will carelessly read data off the stack when it looks for arguments corresponding to format specifiers in its control string - even when no arguments are specified, e.g.:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eprintf(\u0026quot;%s %x %d %c\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eProviding input with the right format specifiers will make the program slip up and reveal the password, hiding somewhere on the stack, on its own accord. Entering the password will make the program print the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of where and how functions in the printf() school of thought look for their arguments.\n- Basic knowledge of how the stack and its frames are organized.\n- Basic knowledge of memory access through pointers and when they are legal/illegal (e.g. Segmentation faults).\u003c/p\u003e\n\n\u003ch2 id=\"corroption-please\"\u003eCorROPtion, please!\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e 60 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Hard\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003cbr /\u003e\n- Learn how to do memory corruption with ROP when the stack is not executable.\n- Get more hands-on tinkering experience with x86-64, binary files/tools etc.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\u003cbr /\u003e\nIn this challenge, the user is given a binary file with a buffer overflow vulnerability on the stack. A function must be called with specific parameters in order to print the flag. The stack is non-executable, but ROP can be used to orchestrate the call, by \u0026ldquo;borrowing\u0026rdquo; data and code snippets lying around in the binary.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\u003cbr /\u003e\n- Knowledge about the possibility of corrupting stack memory, when \u003ccode\u003egets()\u003c/code\u003e from the C Standard Library fetches user input.\n- Knowledge about how different file hardening techniques like stack-executability, canaries and PIE make exploits possible/\u0026ldquo;impossible\u0026rdquo;.\n- Knowledge about the broad-strokes layout of binary files, e.g. where hard-coded data is stored.\n- Knowledge about the role of the stack and how stack memory is managed.\n- Working knowledge about the x86-64 instruction set, corresponding to an undergraduate course.\n- Comfortable with using the GDB and binutils in the terminal to solve a challenge.\n- Knowledge about Python and Bash is useful for delivering the payload.\u003c/p\u003e\n\n\u003ch2 id=\"shrunk-chunk-heap-overflow\"\u003eShrunk-Chunk Heap Overflow\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 70 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​hard\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Knowledge of how metadata on the heap itself is used for its memory management, and how it can be exploited.\n- Knowledge of how certain sequences of (de)allocations on the heap can produce overlapping chunks in previous glibc versions.\n- Knowledge of how the difference between stack and heap memory management provides different approaches for buffer overflow attacks.\n- Proficiency in examining the state of the heap and its allocations during runtime.\n- Better understanding of how \u003ccode\u003emalloc\u003c/code\u003e, \u003ccode\u003efree\u003c/code\u003e and similar functions work.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nThis challenge is based on an overflow vulnerability in glibc popularized in a paper named \u0026lsquo;Glibc Adventures: The Forgotten Chunks\u0026rsquo;. It has only been patched in relatively recent releases compared to other heap exploits. In essence, an overflow of a single null byte corrupting heap metadata and a specific sequence of malloc/free calls leads to two chunks on the heap overlapping. This is possible due to an absence of security checks in dynamic memory management. Since there are two overlapping allocations, exploiters might have indirect control over the memory area that the heap manager has \u0026ldquo;forgotten about\u0026rdquo; through another area. This opens up a lot of possibilities for memory writes and redirection of program execution.\nIn this challenge users will be presented with a binary (source code available) with a seemingly harmless \u0026ldquo;off-by-one\u0026rdquo; error causing the above vulnerability. By causing heap overflow with a single null byte the users can overwrite a global function pointer, redirecting program execution to call print_flag(). The program itself is fairly contrived and artificial in the way that it works, but this was chosen in order to provide a better signal-to noise-ratio for the users: Tracking several malloc/free calls will be important for solving the challenge. It runs inside a Debian 8.11 image utilizing a vulnerable glibc 2.19 implementation, and all default protection measures are in place.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of the C programming language and commonly used functions in its standard library - namely \u003ccode\u003estrlen\u003c/code\u003e, \u003ccode\u003estrcpy\u003c/code\u003e, \u003ccode\u003emalloc\u003c/code\u003e and \u003ccode\u003efree\u003c/code\u003e.\n- Knowledge of the existence of metadata on the heap itself in order to perform dynamic memory management.\n- Knowledge of the ELF format and the exploitability of the .got.plt table to redirect program execution.\n- Ability to use tools such as GDB, objdump and ltrace to examine binary files and runtime memory state.\n- Ability to use Bash or Python in order to provide long/hexadecimal input to the program.\u003c/p\u003e\n"},{id:1,href:"/docs/haaukins/configuration/",title:"Configuration",description:"Haaukins Platform",content:"\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#files-and-directory-structure\"\u003eFiles and directory structure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configyml\"\u003econfig.yml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#exercisesyml\"\u003eexercises.yml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#frontendsyml\"\u003efrontends.yml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ip-tables-configuration\"\u003eIP Tables Configuration\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"configuration\"\u003eConfiguration\u003c/h1\u003e\n\n\u003cp\u003eThis page describes the process of configuring a host for running the Haaukins daemon, \u003ccode\u003ehknd\u003c/code\u003e.\nThe daemon has only been tested on a Linux host with \u003ccode\u003esystemd\u003c/code\u003e, but binaries for other operating systems can be build as well.\u003c/p\u003e\n\n\u003cp\u003eFor the remainder of the Wiki, we assume a user \u003ccode\u003ehknd\u003c/code\u003e user exists with home directory \u003ccode\u003e/home/hknd\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"files-and-directory-structure\"\u003eFiles and directory structure\u003c/h2\u003e\n\n\u003cp\u003eThe following is the default directory structure:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e.\n|-- config.yml\n|-- events\n|   |-- test-10-04-19\n|   |   |-- 005850db.log\n|   |-- test-10-04-19.yml\n|-- exercises.yml\n|-- frontends.yml\n|-- hknd\n`-- users.yml\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003ehknd\u003c/code\u003e file is the binary, and by default is uses \u003ccode\u003econfig.yml\u003c/code\u003e in the working directory as its primary configuration file.\nThe following \u003ccode\u003eYAML\u003c/code\u003e files must be created manually and serve as configuration files for \u003ccode\u003ehknd\u003c/code\u003e:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfiguration file\u003c/th\u003e\n\u003cth\u003ePurpose\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003econfig.yml\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe main configuration file\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eexercises.yml\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe specification of the exercises\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efrontends.yml\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe specification of the existing frontends\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe \u003ccode\u003eusers.yml\u003c/code\u003e acts as a database that stores the information of CLI users.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eevent\u003c/code\u003e directory serves as a database for events, such as the registered teams, the progress of teams and the monitored mouse clicks and key strokes.\u003c/p\u003e\n\n\u003ch3 id=\"config-yml\"\u003econfig.yml\u003c/h3\u003e\n\n\u003cp\u003eExample\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003ehost:\n    http: \u0026lt;wildcard-domain\u0026gt; # will be used for event creation \n    grpc: \u0026lt;server-endpoint\u0026gt; # grpc endpoint\nport:\n    insecure: \u0026lt;insecure-port\u0026gt;\n    secure: \u0026lt;secure-port\u0026gt;\n\ntls:\n  enabled: true\n  certfile: \u0026quot;\u0026lt;path-cert-file\u0026gt;\u0026quot;\n  certkey: \u0026quot;\u0026lt;path-cert-key\u0026gt;\u0026quot;\n  cafile: \u0026quot;\u0026lt;path-cert-ca\u0026gt;\u0026quot;\n\nfiles:\n  ova-directory: \u0026quot;\u0026lt;frontends.yml-file-location\u0026gt;\u0026quot;\n  users-file: \u0026quot;\u0026lt;users.yml-file-location\u0026gt;\u0026quot;\n  exercises-file: \u0026quot;\u0026lt;exercises.yml-file-location\u0026gt;\u0026quot;\n  frontends-file: \u0026quot;\u0026lt;frontends.yml-file-location\u0026gt;\u0026quot;\n\ndb-config:\n  grpc: \u0026quot;\u0026lt;database-endpint\u0026gt;\u0026quot;\n  db-auth-key: \u0026lt;database-auth-key\u0026gt;\n  db-sign-key: \u0026lt;database-sign-key\u0026gt;\n  tls:\n    enabled: true\n    certfile: \u0026quot;\u0026lt;database-endpoint-cert-file-location\u0026gt;\u0026quot;\n    certkey: \u0026quot;\u0026lt;database-endpoint-cert-key-location\u0026gt;\u0026quot;\n    cafile: \u0026quot;\u0026lt;database-endpoint-cert-ca-location\u0026gt;\u0026quot;\n\n\nsign-key: \u0026lt;sign-key\u0026gt;\ndocker-repositories:\n- username: \u0026lt;private-registry-user-name\u0026gt;\n  password: \u0026lt;private-registry-password\u0026gt;\n  serveraddress: \u0026lt;private-registry-endpoint\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe daemon can listen on two different host names for the reverse proxy and the gRPC traffic.\nIn case a HTTPS connection is preferred, the TLS configuration must be enabled, and both the secure (HTTP) and insecure (HTTPS) port must be configured.\u003c/p\u003e\n\n\u003cp\u003eIf TLS is enabled, the \u003ccode\u003eacme\u003c/code\u003e field must be filled in, which ensures that \u003ccode\u003ehknd\u003c/code\u003e manages the TLS certificates.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e- Note -\u003c/strong\u003e as of now, only Cloudflare is supported as the ACME DNS provider.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edocker-repositories\u003c/code\u003e and \u003ccode\u003eova-directory\u003c/code\u003e specify from which Docker repository and path on the filesystem \u003ccode\u003ehknd\u003c/code\u003e retrieves the images for the virtual instances.\u003c/p\u003e\n\n\u003cp\u003eFor all (latest) configuration options, take a look at the \u003ccode\u003eConfig struct\u003c/code\u003e in \u003ca href=\"https://github.com/aau-network-security/haaukins/blob/master/daemon/daemon.go#L82\"\u003eGolang source code\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"exercises-yml\"\u003eexercises.yml\u003c/h3\u003e\n\n\u003cp\u003eExample\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eexercises:\n  - name: Cross-site Request Forgery\n    tags:\n    - csrf\n    docker:\n    - image: \u0026lt;image name\u0026gt;\n      dns:\n      - name: formalbank.com\n        type: A\n      memoryMB: 80\n      flag:\n      - tag: csrf-1\n        name: Cross-site Request Forgery\n        env: APP_FLAG\n        points: 12\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis file contains a list of all exercises that can be run on Haaukins.\u003c/p\u003e\n\n\u003cp\u003eFor all (latest) configuration options, take a look at the \u003ccode\u003eExercise struct\u003c/code\u003e in the \u003ca href=\"https://github.com/aau-network-security/haaukins/blob/master/store/exercise.go#L41\"\u003eGolang source code\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"frontends-yml\"\u003efrontends.yml\u003c/h2\u003e\n\n\u003cp\u003eExample\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003efrontends:\n- image: kali\n  memoryMB: 4096\n  cpu: 2\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eContains a list of all frontends that Haaukins.\nThe value of \u003ccode\u003eimage\u003c/code\u003e can be used as a tag when creating a new event from the CLI.\nThe daemon searches for the path \u003ccode\u003e\u0026lt;ova-directory\u0026gt;/\u0026lt;image name\u0026gt;.ova\u003c/code\u003e, where \u003ccode\u003eova-directory\u003c/code\u003e is retrieved from the \u003ccode\u003econfig.yml\u003c/code\u003e, and the \u003ccode\u003eimage name\u003c/code\u003e is provided by the CLI user.\u003c/p\u003e\n\n\u003ch2 id=\"ip-tables-configuration\"\u003eIP Tables Configuration\u003c/h2\u003e\n\n\u003cp\u003eIn case \u003ccode\u003ehknd\u003c/code\u003e does not listen on the default HTTP(s) ports (i.e. 80 and 443), you can specify forwarding rules in \u003ccode\u003eiptables\u003c/code\u003e as follows for HTTP\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003esudo iptables -t nat -A PREROUTING -i \u0026lt;network interface\u0026gt; -p tcp -m tcp --dport 80 -j DNAT --to \u0026lt;ip address\u0026gt;:\u0026lt;port\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand HTTPS\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003esudo iptables -t nat -A PREROUTING -i \u0026lt;network interface\u0026gt; -p tcp -m tcp --dport 443 -j DNAT --to \u0026lt;ip address\u0026gt;:\u0026lt;port\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n"},{id:2,href:"/docs/haaukins/connected-services/",title:"Connected Services",description:"Services used by Haaukins Platform",content:"\n\n\u003cp\u003eHaaukins is using few services to operate its ordinary workload. There are three different services which Haaukins is using namely, haaukins-store, haaukins-exercises, haaukins-webclient.\u003c/p\u003e\n\n\u003ch2 id=\"haaukins-webclient\"\u003eHaaukins Webclient\u003c/h2\u003e\n\n\u003cp\u003eThis is \u003cstrong\u003eNOT\u003c/strong\u003e a mandatory service for Haaukins to work. It is implementation of CLI on web, it is using Envoy Proxy with gRPC. Detailed information regarding to it and source code can be found following link here: \u003ca href=\"https://github.com/aau-network-security/haaukins-webclient\"\u003ehaaukins-webclient\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"haaukins-store\"\u003eHaaukins Store\u003c/h2\u003e\n\n\u003cp\u003eThis is a service which is using PostreSQL with gRPC. Detailed information and source code can be found following link: \u003ca href=\"https://github.com/aau-network-security/haaukins-store\"\u003ehaaukins-store\u003c/a\u003e. Without haaukins-store, Haaukins can \u003cstrong\u003eNOT\u003c/strong\u003e work from version \u003ca href=\"https://github.com/aau-network-security/haaukins/releases/tag/2.0.0\"\u003e2.0.0\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"haaukins-exercises\"\u003eHaaukins Exercises\u003c/h2\u003e\n\n\u003cp\u003eThis is a service which is using MongoDB with gRPC. Detailed information and source code can be found following link: \u003ca href=\"https://github.com/aau-network-security/haaukins-exercises\"\u003ehaaukins-exercises\u003c/a\u003e. Without haaukins-exercise, Haaukins can \u003cstrong\u003eNOT\u003c/strong\u003e work from version \u003ca href=\"https://github.com/aau-network-security/haaukins/releases/tag/2.4.0\"\u003e2.4.0\u003c/a\u003e\u003c/p\u003e\n"},{id:3,href:"/docs/challenges/cryptography/",title:"Cryptography",description:"Cryptography challenges for Haaukins Platform",content:"\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#cryptography\"\u003eCryptography\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#difficulty-levels\"\u003eDifficulty Levels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#js-crypto-client\"\u003eJS Crypto Client\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#md5-collision-course\"\u003eMD5 Collision Course\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#lurking-in-the-shadows\"\u003eLurking in the shadows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ssh-vigenère-vignette\"\u003eSSH Vigenère Vignette\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"cryptography\"\u003eCryptography\u003c/h1\u003e\n\n\u003cp\u003eThe main goal is usually to crack or clone cryptographic objects or algorithms to reach the flag.\u003c/p\u003e\n\n\u003ch3 id=\"difficulty-levels\"\u003eDifficulty Levels\u003c/h3\u003e\n\n\u003cp\u003eThe levels of difficulty scale is based on the number of steps required in order to solve the\nTraining Challenge\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eVery Easy​:\u003c/strong\u003e It requires just one step in order to get the flag\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEasy:\u003c/strong\u003e​ It requires one-two steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMedium​:\u003c/strong\u003e It requires two-three steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHard:\u003c/strong\u003e ​It requires three-four steps based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVery Hard:\u003c/strong\u003e​ It requires several steps in order to get the flag\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"js-crypto-client\"\u003eJS Crypto Client\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 10 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstanding of cryptography algorithms\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​The challenge is based on ​a rotation of the Caesar’s cipher encryption.\nChallenge includes only index.html file which contains the encrypted flag through some JS\ncode.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Know how Caesar’s cipher encryption techniques works\u003c/p\u003e\n\n\u003ch2 id=\"md5-collision-course\"\u003eMD5 Collision Course\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 40 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearning the basic premise of hash security checks and collision attacks.\u003c/li\u003e\n\u003cli\u003eLearning how MD5 hashing is less optimal for security applications due to the relative ease of constructing collisions.\u003c/li\u003e\n\u003cli\u003eLearning how to give hexadecimal inputs in the terminal for other challenges.\u003c/li\u003e\n\u003cli\u003eLearning how a little bit of brute-forcing might be viable for solving a challenge.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​MD5 hashing was originally meant to be a function used for security applications.\nHowever, due to the relative ease of constructing colliding hashes, spoofing passwords and file checksums alike, the MD5 is now considered to be \u0026ldquo;cryptographically broken\u0026rdquo;.\nIn this challenge, users will have to exploit a simple property holding for some MD5 collisions in order to construct an admin key, granting access to the flag.\nCollision attacks like the one in the challenge are probably not seen in the wild very often. However, decisions were made in order to make the challenge easier, since the necessary computations for the attack usually are quite extensive.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge about hexadecimal values and their relationship to bits, bytes and ASCII.\u003c/p\u003e\n\n\u003ch2 id=\"lurking-in-the-shadows\"\u003eLurking in the shadows\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 10 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMore knowledge about password hashes and brute forcing of these.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e This challenge is just a simple brute force challenge, where the user has been granted access to the shadow file.\nThe user will then need to retrieve the root password hash and crack it to login to the ssh server with root privileges.\nThe flag will be in the user home directory.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Have heard about brute forcing.\u003c/p\u003e\n\n\u003ch2 id=\"ssh-vigenère-vignette\"\u003eSSH Vigenère Vignette\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 50 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn how the cyclical application of the keyword is an important weakness of polyalphabetic ciphers.\u003c/li\u003e\n\u003cli\u003eLearn how hashes can be used to reverse engineer unknown values.\u003c/li\u003e\n\u003cli\u003ePossibly gain a better understanding of how the Vigenère cipher works.\u003c/li\u003e\n\u003cli\u003ePossibly gain hands-on experience with implementing encryption/decryption algorithms.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e The Vigenère cipher can be construed as a more convoluted version of the Caesar cipher: The letters of a keyword are applied as offsets to the plaintext in a cyclical fashion in order to obscure the original message instead of always using the same offset on each plaintext letter. For instance, applying the keyword LEMON to the plaintext ATTACKATDAWN cyclically, i.e. applying LEMONLEMONLE, produces the cipher LXFOPVEFRNHR when using the zero-based enumeration of the capitalized English alphabet.\nWhile it was historically known as \u0026ldquo;the indecipherable cipher\u0026rdquo;, in many cases information about the cipher keyword can easily be obtained through statistical methods such as the Kasiski and Friedman analyses - relying upon assumptions about recurrent substrings and letters in real-life language use, respectively. Fully automated tools for deciphering Vigenère-encrypted texts exist online and are often used in a CTF setting to solve these challenges very quickly.\nWith this challenge it was attempted to require a more hands-on approach in order to break the cipher. In order to access the flag, the user has to decrypt the password to an SSH server by utilizing knowledge about how the Vigenère cipher works, and what its weaknesses are. Overall, the given information is limited and fragmented in a way that makes it harder to use statistics reliably:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe available cipher text is relatively short.\u003c/li\u003e\n\u003cli\u003eThere are no recurrent cipher substrings of length above 1.\u003c/li\u003e\n\u003cli\u003eThe encryption alphabet deviates from a typical language alphabet in its motley character set and letter case distinction.\u003c/li\u003e\n\u003cli\u003eSome plaintext is encoded in heavily stylized \u0026ldquo;leetspeak\u0026rdquo;, deviating from normal language use.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis hopefully makes it more difficult to rely on automated tools for crypto analysis, making the challenge a better learning opportunity.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Proficiency in and access to a programming language with facilities for quickly generating SHA-256 hashes.\n- Mathematical background for understanding how the Vigenère cipher works, namely the modulo operation.\n- Fundamental knowledge of what a hash value is.\n- Ability to evaluate the feasibility of brute-force solutions.\u003c/p\u003e\n"},{id:4,href:"/docs/challenges/forensics/",title:"Forensics",description:"Forensics challenges for Haaukins Platform",content:"\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#forensics\"\u003eForensics\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#difficulty-levels\"\u003eDifficulty Levels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#network-sniffing\"\u003eNetwork sniffing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#web-server-login\"\u003eWeb server login\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#network-scanning\"\u003eNetwork scanning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sshtay-hydrated\"\u003eSSHtay HYDRAted\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#telnet-stream-and-login\"\u003eTelnet Stream and Login\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#git-logs\"\u003eGit logs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ftp-server-login\"\u003eFTP server login\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#man-in-the-middle\"\u003eMan in the Middle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#steganography\"\u003eSteganography\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#doormat-steganography\"\u003eDoormat Steganography\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#steganography-slam\"\u003eSteganography Slam\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#linux-walk-through\"\u003eLinux walk-through\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#translator\"\u003eTranslator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#android-permission-abuse\"\u003eAndroid Permission Abuse\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#android-phishing-login-page\"\u003eAndroid Phishing Login Page\u003c/a\u003e\n\u003c!-- - [Vulnerability exploitation](#vulnerability-exploitation) --\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#man-in-the-middle\"\u003eMan in the Middle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#steganography\"\u003eSteganography\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#doormat-steganography\"\u003eDoormat Steganography\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#steganography-slam\"\u003eSteganography Slam\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#linux-walk-through\"\u003eLinux walk-through\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#Translator\"\u003eTranslator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#Android-Permission-Abuse\"\u003eAndroid Permission Abuse\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#Android-Phishing-Login-Page\"\u003eAndroid Phishing Login Page\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"forensics\"\u003eForensics\u003c/h1\u003e\n\n\u003cp\u003eThis is a broad category that includes different types of training challenges\nsuch as file format analysis, steganography, memory dump analysis, or network packet\ncapture analysis. Any challenge to examine and process a hidden piece of information out of\nstatic data files could be considered a Forensics challenge, unless it involves cryptography.\u003c/p\u003e\n\n\u003ch3 id=\"difficulty-levels\"\u003eDifficulty Levels\u003c/h3\u003e\n\n\u003cp\u003eThe levels of difficulty scale is based on the number of steps required in order to solve the\nTraining Challenge\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eVery Easy​:\u003c/strong\u003e It requires just one step in order to get the flag\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEasy:\u003c/strong\u003e​ It requires one-two steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMedium​:\u003c/strong\u003e It requires two-three steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHard:\u003c/strong\u003e ​It requires three-four steps based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVery Hard:\u003c/strong\u003e​ It requires several steps in order to get the flag\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"network-sniffing\"\u003eNetwork sniffing\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 8 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Very Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWorking with Kali Linux\u003c/li\u003e\n\u003cli\u003eNetwork packets, protocols and software (Wireshark) dedicated to monitor and analyse\nnetwork traffic\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​The network sniffing challenge, encourages the HAAUKINS user to utilize\nbasic knowledge about network communication to execute a simple cyber attack of network\neavesdropping. The user is expected to make use of Wireshark, to complete a basic passive\nnetwork scan of the local network. By sorting the traffic captured over a short period of time\nand analysing the result, the user should be able to successfully locate an unencrypted login\nrequest to a HTTP server. Inspecting this POST request packet, will lead to the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Basic knowledge in Linux OS and its terminal\n- Wireshark\u003c/p\u003e\n\n\u003ch2 id=\"web-server-login\"\u003eWeb server login\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 10 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eKnowledge of HTTP POST requests and why encrypted traffic is so important\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​In this challenge, the HAAUKINS user is expected to utilise a combination of\nknowledge from the network sniffing and network scanning exercises. By further inspecting\nthe HTTP POST request packet, the user will be able to find login credentials. This is a\nsimulation of wiretapping into a network and monitoring the traffic, while someone else\nconnected to the same network completed a login procedure to an unencrypted website. The\nflag is presented to the user, when they access the website connected to the destination\nip-address of the HTTP POST request packet, and successfully logs in using the login\ncredentials they have just sniffed.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n-  Network scanning\u003c/p\u003e\n\n\u003ch2 id=\"network-scanning\"\u003eNetwork scanning\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 5 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Very easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduction to NMAP and network scanning\u003c/li\u003e\n\u003cli\u003eKnowledge in fingerprinting, ports and specific protocols such as HTTP\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​The network scanning challenge is indented as an introduction to\nvulnerabilities associated with unencrypted network traffic, HTTP. The HAAUKINS user, is\nexpected to perform a simple active network scanning procedure of a local subnet using\nNMAP. Through analysing the outcome of the scan, it should be possible to locate a\ncompletely open unencrypted webserver, that subsequently can be accessed directly by\nip-address and provide the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Basic knowledge in Linux OS and its terminal\n- Know what software to use when scanning a network\u003c/p\u003e\n\n\u003ch2 id=\"sshtay-hydrated\"\u003eSSHtay HYDRAted\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​20 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Very easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to perform a brute-force attack on an SSH server by using Hydra.\n- Learn how to establish constraints for a password alphabet.\n- Learn how to reason about the feasibility of the password search space and the impact of parallelization.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nIn this challenge, users can brute-force a simple password for an SSH server by using Hydra. Hydra is a versatile tool commonly used for brute-forcing login details in penetration testing etc. This tool is known for being really fast, in large part due to its parallelization.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Able to work with the Linux CLI.\n- Knows how to connect to an SSH server.\n- Knowledge of Hydra helps, but ability to google it is sufficient.\u003c/p\u003e\n\n\u003ch2 id=\"telnet-stream-and-login\"\u003eTelnet Stream and Login\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 8-8  \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to follow a network stream in Wireshark.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nIn this exercise the student will have to utilize Wireshark to listen to a network, identify a telnet stream and follow this stream, this stream will then contain the first flag and login credentials to login to the telnet server and find the second flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of Wireshark.\n- Knowledge of traffic types.\u003c/p\u003e\n\n\u003ch2 id=\"git-logs\"\u003eGit logs\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 12  \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn that it is important to consider what is committed to a repository.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nThe challenge consists of one host running ssh, the user the need to log in to this host and find out that the folder \u0026ldquo;project\u0026rdquo; is tracked using git.\nFrom there the user then needs to look into the git logs and find out that a password(the flag) is deleted at one of the commits and then go back the the commit before that and find the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of git file tracking\u003c/p\u003e\n\n\u003ch2 id=\"ftp-server-login\"\u003eFTP server login\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 7 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduction to File Transfer Protocol, FTP, and its vulnerabilities such as missing\nencryption\u003c/li\u003e\n\u003cli\u003eFingerprinting with NMAP\u003c/li\u003e\n\u003cli\u003eBrute force attacks on a live system and why a powerful wordlist can do this easy\u003c/li\u003e\n\u003cli\u003eCharacteristics of encoding schemes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​FTP servers are used to keep files and deliver it through FT protocol, however\nsome FTP servers use weak or default passwords which make them vulnerable to brute\nforce attacks and gain access to files. This challenge requires to brute force FTP server\nusing default dictionaries on Kali machine in order to achieve flag file.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowhow to scan a network\n- Basic knowledge of Hydra (Kali Tool) or different techniques to make a brute force attack\non a live system\u003c/p\u003e\n\n\u003c!-- ## Vulnerability exploitation\n\n**Points:** ​ 10 **Difficulty:** ​Easy\n\n**Learning Objectives:**\n\n- Introduction to the Metasploit framework\n- Confidence navigating Kali Linux terminal\n- Acquire knowledge about vulnerability search and exploits\n-\n**Description:** ​In this challenge, the HAAUKINS user is expected to utilise an operating\nsystem specific active network scan, to locate a host connected to the network running an\noutdated and extremely vulnerable operating system. By deeper inspection, the user will be\nable to retrieve specific information about this host, that will allow them to Google their way\nto an exploit using the Metasploit framework for exactly this target. By navigating through\nMetasploit and setting up the configuration, the user will be able to gain root access to the\nWindows computer. In the final step of the challenge, the user has to navigate through the\nfilesystem and find a file containing sensitive information.\n\n**Prerequisite:**\n- Knowhow to scan a network and what to look after (challenge 1.2) --\u003e\n\n\u003ch2 id=\"man-in-the-middle\"\u003eMan in the Middle\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 15 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Very hard\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eARP spoofing a network\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​Man-in-the-middle is an attack where the attacker secretly relays and possibly\nalters the communications between two parties who believe that they are directly\ncommunicating with each other. To get the flag the participant will need to act as\nman-in-the-middle between a server and a client.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Know what a man-in-the-middle attack is\n- Know the vulnerabilities attached by only running https on part of the website\u003c/p\u003e\n\n\u003ch2 id=\"steganography\"\u003eSteganography\u003c/h2\u003e\n\n\u003ch3 id=\"doormat-steganography\"\u003eDoormat Steganography\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 60 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Very hard\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn how extraneous file headers can be used to detect hidden data in media files.\u003c/li\u003e\n\u003cli\u003eLearn how all files are in a sense just byte sequences, and how this knowledge can be used to restore original files.\u003c/li\u003e\n\u003cli\u003eLearn how to brute-force crack a 4-digit PIN.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​Data can easily be hidden in media files while preserving file validity and without introducing any noticeable aesthetic changes.\nThis feature is sometimes exploited in order to transfer malicious executables or other files to a target, bypassing regular antivirus checks etc.\nSome modern browsers will warn users against downloading fishy images from fishy websites - when unexpected file headers are detected for instance.\nIn this challenge the user will ignore this exact precaution in order to get the password to access the flag.\nOn a website, the user needs an unknown password in order to access the flag inside a \u0026ldquo;vault\u0026rdquo;, and as per the common trope an extra key is hidden underneath a doormat.\nIn different terms, the user has to find the bytes of a ZIP file header in a doormat.jpeg file, restore the archive by extracting the necessary bytes, and then crack it in order to get the password to the vault and the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge about the possibility of hiding extra data in media files.\n- Knowledge about the use of file headers to interpret different file types.\n- Knowledge about the feasibility of brute-forcing simple passwords, like 4-digit PINs.\n- Ability to read and write bytes from a file through scripting, the CLI or the like.\u003c/p\u003e\n\n\u003ch3 id=\"steganography-slam\"\u003eSteganography Slam\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 14 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearning the basic premise of steganography: That extraneous data can easily be hidden in files without compromising their integrity.\u003c/li\u003e\n\u003cli\u003eLearning how many other steganography challenges can be solved: By reinterpreting the given data.\u003c/li\u003e\n\u003cli\u003eLearning how to inspect raw file data.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e The basic premise of steganography is that extraneous data can easily be hidden in files, especially media files, without compromising their integrity.\nThis challenge introduces users to that premise. In order to retrieve the flag, they will have to reinterpret the raw binary data of an image file as ASCII text.\nThe challenge description and content of the image file hint at the solution.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge about the existence of ASCII as a character encoding.\u003c/p\u003e\n\n\u003ch2 id=\"linux-walk-through\"\u003eLinux walk-through\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 1-2-3-4-5-6-7-8 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn the basic commands of Linux.\u003c/li\u003e\n\u003cli\u003eLearn about the file permissions of Linux.\u003c/li\u003e\n\u003cli\u003eLearn how to execute binaries within Linux.\u003c/li\u003e\n\u003cli\u003eLearn how to navigate around in a Linux terminal environment.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e This container will contain a number of flags, it will mainly focus on key commands in Linux.\nThe purpose is to make a Linux environment for the user to learn how to use the terminal environment within Linux.\nSo it will be very simple challenges which requires the use of \u003cem\u003ecd\u003c/em\u003e, \u003cem\u003els\u003c/em\u003e, \u003cem\u003efind\u003c/em\u003e, \u003cem\u003enmap\u003c/em\u003e, \u003cem\u003egrep\u003c/em\u003e among others.\nThis will give the user an overview over the Linux environment to continue on all the other challenges on Haaukins.\nThis is intended for people who never before seen a terminal or worked with Linux for that matter.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Know how to open a terminal and type a command.\u003c/p\u003e\n\n\u003ch2 id=\"translator\"\u003eTranslator\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e 18 - 21 - 23 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Easy - Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to reverse an apk.\n- Learn about apk certificate.\n- Learn to follow a packed in wireshark.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\nThis app provide an android device a translator that can be used on every site. By highligting a word or sentence on the device the app can be launched on the selection bar. The app then sends the text to be translated online.\nThe app is holding secrets that shows information about the request that can be received by revese engineering the app.\u003cbr /\u003e\nThe challenge is using an emulator, wireshark and multiple android tools to get information about the app and the connections it have.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of an android project.\n- Knowledge of where information can be found inside an android project.\n- Know how to reverse and read an APK file by using APKTOOL\n- Knowledge of following a stream in wireshark.\u003c/p\u003e\n\n\u003ch2 id=\"android-permission-abuse\"\u003eAndroid Permission Abuse\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e 27 - 29 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to reverse an apk.\n- Learn to read android src code.\n- Learn to follow a packed in wireshark.\n- Learn about permissions on android.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\nThis challenge is an apk file that ask for permission from the user and with the permission to read just sending the data in clear text over the internet to an api hosted. This shows a peak into how much data can be acces when got permission, and permission is accepted by most without thinking about this. This is also way in the latast version of android there have been focus on adding more layers to the permission and get the user to actually think about them.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of an android project.\n- Knowledge of where information can be found inside an android project.\n- Know how to reverse and read an APK file by using APKTOOL.\n- Knowledge of following a stream in wireshark.\n- Knowledge of android permissions and what is possible id they are granted.\u003c/p\u003e\n\n\u003ch2 id=\"android-phishing-login-page\"\u003eAndroid Phishing Login Page\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e 37 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn to follow a packed in wireshark.\n- Learn about android app links.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\nThis challenge is using android app link to phishing data from the user. When the app android app is installed on the android device, it is linked with a website it does not own, in this case it is a fake banking website, that have a login screen. When clicking on a link to the website the app launches instead, the app then shows a login screen. When trying to login nothing happens on the screen, but the credentials is send to a server on the network.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of an android project.\n- Knowledge of following a stream in wireshark.\n- Knowledge of app links on android.\u003c/p\u003e\n"},{id:5,href:"/docs/haaukins/installation/",title:"Installation",description:"Haaukins Platform",content:"\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#server-installation\"\u003eServer Installation\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#configuration-files-and-directory-structure\"\u003eConfiguration files and directory structure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#systemd-configuration\"\u003eSystemd Configuration\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#client-installation\"\u003eClient Installation\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#linux-and-osx\"\u003eLinux and OSX\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#globally\"\u003eGlobally\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#locally\"\u003eLocally\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#troubleshooting\"\u003eTroubleshooting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#windows\"\u003eWindows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#globally-1\"\u003eGlobally\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#locally-1\"\u003eLocally\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#rest-of-the-installation-environment-variables\"\u003eRest of the installation (environment variables)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cli-format-guideline\"\u003eCLI Format Guideline\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#format\"\u003eFormat\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#entities\"\u003eEntities\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#actions\"\u003eActions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#arguments\"\u003eArguments\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#identifiers\"\u003eIdentifiers\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#examples\"\u003eExamples\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"server-installation\"\u003eServer Installation\u003c/h1\u003e\n\n\u003cp\u003eThis page describes the process of configuring a host for running the Haaukins daemon, \u003ccode\u003ehknd\u003c/code\u003e.\nThe daemon has only been tested on a Linux host with \u003ccode\u003esystemd\u003c/code\u003e, but binaries for other operating systems can be build as well.\u003c/p\u003e\n\n\u003cp\u003eFor the remainder of the Wiki, we assume a user \u003ccode\u003ehknd\u003c/code\u003e user exists with home directory \u003ccode\u003e/home/hknd\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"configuration-files-and-directory-structure\"\u003eConfiguration files and directory structure\u003c/h2\u003e\n\n\u003cp\u003eThe following is the default directory structure:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e.\n|-- config.yml\n|-- events\n|   |-- test-10-04-19\n|   |   |-- 005850db.log\n|   |-- test-10-04-19.yml\n|-- exercises.yml\n|-- frontends.yml\n|-- hknd\n`-- users.yml\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003ehknd\u003c/code\u003e file is the binary, and by default is uses \u003ccode\u003econfig.yml\u003c/code\u003e in the working directory as its primary configuration file.\nThe following \u003ccode\u003eYAML\u003c/code\u003e files must be created manually and serve as configuration files for \u003ccode\u003ehknd\u003c/code\u003e:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfiguration file\u003c/th\u003e\n\u003cth\u003ePurpose\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003econfig.yml\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe main configuration file\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eexercises.yml\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe specification of the exercises\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efrontends.yml\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe specification of the existing frontends\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe \u003ccode\u003eusers.yml\u003c/code\u003e acts as a database that stores the information of CLI users.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eevent\u003c/code\u003e directory serves as a database for events, such as the registered teams, the progress of teams and the monitored mouse clicks and key strokes.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003econfig.yml\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExample\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003ehost:\n  http: ntp-event.dk\n  grpc: cli.sec-aau.dk\nport:\n  insecure: 8080\n  secure: 8081\nsign-key: ...\ntls:\n  enabled: true\n  acme:\n    email: ...\n    api-key: ...\n    development: false\ndocker-repositories:\n- username: ...\n  password: ...\n  serveraddress: ...\nova-directory: \u0026quot;/scratch/ova\u0026quot;\nexercises-file: \u0026quot;....\u0026quot;\nusers-file: \u0026quot;\u0026lt;location-of-users-file\u0026gt;\u0026quot;\nexercises-file: \u0026quot;\u0026lt;location-of-exercises-file\u0026gt;\u0026quot;\nfrontends-file: \u0026quot;\u0026lt;location-of-frontends-file\u0026gt;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe daemon can listen on two different host names for the reverse proxy and the gRPC traffic.\nIn case a HTTPS connection is preferred, the TLS configuration must be enabled, and both the secure (HTTP) and insecure (HTTPS) port must be configured.\u003c/p\u003e\n\n\u003cp\u003eIf TLS is enabled, the \u003ccode\u003eacme\u003c/code\u003e field must be filled in, which ensures that \u003ccode\u003ehknd\u003c/code\u003e manages the TLS certificates.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e- Note -\u003c/strong\u003e as of now, only Cloudflare is supported as the ACME DNS provider.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edocker-repositories\u003c/code\u003e and \u003ccode\u003eova-directory\u003c/code\u003e specify from which Docker repository and path on the filesystem \u003ccode\u003ehknd\u003c/code\u003e retrieves the images for the virtual instances.\u003c/p\u003e\n\n\u003cp\u003eFor all (latest) configuration options, take a look at the \u003ccode\u003eConfig struct\u003c/code\u003e in \u003ca href=\"https://github.com/aau-network-security/haaukins/blob/master/daemon/daemon.go#L82\"\u003eGolang source code\u003c/a\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eexercises.yml\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExample\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eexercises:\n  - name: Cross-site Request Forgery\n    tags:\n    - csrf\n    docker:\n    - image: \u0026lt;image name\u0026gt;\n      dns:\n      - name: formalbank.com\n        type: A\n      memoryMB: 80\n      flag:\n      - tag: csrf-1\n        name: Cross-site Request Forgery\n        env: APP_FLAG\n        points: 12\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis file contains a list of all exercises that can be run on Haaukins.\u003c/p\u003e\n\n\u003cp\u003eFor all (latest) configuration options, take a look at the \u003ccode\u003eExercise struct\u003c/code\u003e in the \u003ca href=\"https://github.com/aau-network-security/haaukins/blob/master/store/exercise.go#L41\"\u003eGolang source code\u003c/a\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003efrontends.yml\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExample\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003efrontends:\n- image: kali\n  memoryMB: 4096\n  cpu: 2\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eContains a list of all frontends that Haaukins.\nThe value of \u003ccode\u003eimage\u003c/code\u003e can be used as a tag when creating a new event from the CLI.\nThe daemon searches for the path \u003ccode\u003e\u0026lt;ova-directory\u0026gt;/\u0026lt;image name\u0026gt;.ova\u003c/code\u003e, where \u003ccode\u003eova-directory\u003c/code\u003e is retrieved from the \u003ccode\u003econfig.yml\u003c/code\u003e, and the \u003ccode\u003eimage name\u003c/code\u003e is provided by the CLI user.\u003c/p\u003e\n\n\u003ch2 id=\"systemd-configuration\"\u003eSystemd Configuration\u003c/h2\u003e\n\n\u003cp\u003eCreate a user named \u003ccode\u003ehknd\u003c/code\u003e and and add the following system service configuration to \u003ccode\u003e/lib/systemd/system/hknd.service\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-ini\"\u003e[Unit]\nDescription=Haaukins (Daemon)\nConditionPathExists=/home/hknd/daemon\nAfter=network.target\n\n[Service]\nType=simple\nUser=hknd\nGroup=hknd\nLimitNOFILE=1024\n\nRestart=on-failure\nRestartSec=10\nStartLimitIntervalSec=60\nTimeOutStopSec=300\n\nWorkingDirectory=/home/hknd/daemon\nExecStart=/home/hknd/daemon/hknd\n\n# removing leftover docker-containers and virtualmachines\nExecStopPost=/bin/bash /home/hknd/daemon/clean-up.sh\n\n# make sure log directory exists and owned by syslog\nPermissionsStartOnly=true\nExecStartPre=/bin/mkdir -p /var/log/hknd\nExecStartPre=/bin/chown root:adm /var/log/hknd\nExecStartPre=/bin/chmod 755 /var/log/hknd\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=hknd\n\n[Install]\nWantedBy=multi-user.target\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn some cases, some vms and docker containers might leftover, which means that even though Haaukins service has been stopped by running following command:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e`systemctl stop hknd` \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ethere could be some number of vms and docker containers which are running (although they should not). For such a situation, \u003ccode\u003eExecStopPost\u003c/code\u003e script should be included into service file as well. The script for cleaning up leftovers from Haaukins (- after Haaukins service is stopped-) is given below;\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eclean-up.sh\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e#!\n# Killing containers which has label of \u0026quot;hkn\u0026quot;\ndocker kill $(docker ps -q --filter \u0026quot;label=hkn\u0026quot;)\n# Removing killed containers which have label of \u0026quot;hkn\u0026quot;\ndocker rm $(docker ps -q -a --filter \u0026quot;label=hkn\u0026quot; --filter status=exited)\n# Prune Network bridges which are not used by any container\ndocker system prune -f  \ndocker network prune -f\n\ndocker volume prune -f\n# Close running vms all\nVBoxManage list runningvms | awk '{print $2;}' | xargs -I vmid VBoxManage controlvm vmid poweroff\n## Unregister VMs ID\nVBoxManage list vms | awk '{print $2;}' | xargs -I vmid VBoxManage unregistervm --delete vmid\n\nrm -rf /home/hknd/VirtualBox\\ VMs/*\n# Cleanup previously imported VMDKs path\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNote that some paths could differ according to your system.\u003c/p\u003e\n\n\u003ch1 id=\"client-installation\"\u003eClient Installation\u003c/h1\u003e\n\n\u003cp\u003eHaaukins is designed in a client-server architecture, and thereby requires no access to the actual hardware that it is running on. This also means that the client requires network access (typically through the internet) to the server on which the actual event is being run.\u003c/p\u003e\n\n\u003cp\u003eThis guide will describe how to install the \u003cstrong\u003eclient\u003c/strong\u003e on \u003cstrong\u003eyour local machine\u003c/strong\u003e, in order for you to interact with the server and thereby manage events.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDownload the latest version of the client\nNavigate to \u003ca href=\"https://github.com/aau-network-security/haaukins/releases\"\u003ethe releases page\u003c/a\u003e and find the latest version of Haaukins.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/releases_page.png\" alt=\"How to find latest version of Haaukins\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eYou are presented with a lot of zip files which includes all necessary binary , readme and licence files, and you have to select the appropriate binary for your operating system.\u003c/p\u003e\n\n\u003cp\u003eYou find that by answering two questions:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat architecture does my operating system run?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e32-bit: \u003ccode\u003eARCH = 386\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e64-bit: \u003ccode\u003eARCH = amd64\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat is the name of my operating system?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMac OSX: \u003ccode\u003eOS = darwin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWindows: \u003ccode\u003eOS = windows\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLinux: \u003ccode\u003eOS = linux\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThen locate the file under the release with the name: \u003ccode\u003ehaaukins-[OS]-[ARCH].zip\u003c/code\u003e (e.g. \u003ccode\u003ehaaukins_macOS_64-bit.zip\u003c/code\u003e is the client files for Mac OSX running 64-bit)\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eInstall client on your system\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe binary you downloaded is a statically linked binary, meaning every that it needs in order to make it run is contained inside of it. Now you have to read the individual guide for your personal operating system). The use of \u003ccode\u003e$\u003c/code\u003e denotes that the command is expected to be run in a shell (on Windows this is typically \u003ccode\u003eStart -\u0026gt; Run -\u0026gt; cmd\u003c/code\u003e or PowerShell).\u003c/p\u003e\n\n\u003ch2 id=\"linux-and-osx\"\u003eLinux and OSX\u003c/h2\u003e\n\n\u003cp\u003eYou now have to pick and choose whether you want to install the client globally on your system (the binary will be available to every user) or locally.\u003c/p\u003e\n\n\u003ch3 id=\"globally\"\u003eGlobally\u003c/h3\u003e\n\n\u003cp\u003eNavigate (in a terminal) to the folder in which you downloaded the client and perform following steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003e$ unzip haaukins_macOS_64-bit.zip\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ccode\u003e$ mv haaukins_macOS_64-bit/hkn /usr/local/bin/hkn\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ccode\u003e$ chmod +x /usr/local/bin/hkn\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow you should have the \u003ccode\u003ehkn\u003c/code\u003e command available, test it out by running \u003ccode\u003e$ hkn\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf that is not the case, check your environment variable \u003ccode\u003e$PATH\u003c/code\u003e and make sure use see \u003ccode\u003e/usr/local/bin\u003c/code\u003e in there, else make sure to add it in your \u003ccode\u003e.bashrc\u003c/code\u003e or \u003ccode\u003e.bash_profile\u003c/code\u003e or \u003ccode\u003e.zshrc\u003c/code\u003e (depending on your the shell you use).\u003c/p\u003e\n\n\u003ch3 id=\"locally\"\u003eLocally\u003c/h3\u003e\n\n\u003cp\u003eNavigate to the folder in which you downloaded the client and perform: \u003ccode\u003e$ mkdir -p ~/.local/bin \u0026amp;\u0026amp; mv haaukins_macOS_64-bit/hkn ~/.local/bin/hkn\u003c/code\u003e.\nAfter make sure you set the executable bit: \u003ccode\u003e$ chmod +x ~/.local/bin/hkn\u003c/code\u003e\nNow you should have the \u003ccode\u003ehkn\u003c/code\u003e command available, test it out by running \u003ccode\u003e$ hkn\u003c/code\u003e. If that is not the case, check your environment variable \u003ccode\u003e$PATH\u003c/code\u003e and make sure use see \u003ccode\u003e$HOME/bin\u003c/code\u003e or \u003ccode\u003e~/bin\u003c/code\u003e in there, else make sure to add it in your \u003ccode\u003e.bashrc\u003c/code\u003e or \u003ccode\u003e.bash_profile\u003c/code\u003e or \u003ccode\u003e.zshrc\u003c/code\u003e (depending on your the shell you use).\nThis can be done (but might not be needed) by: \u003ccode\u003e$ echo 'PATH=\u0026quot;$PATH:$HOME/.local/bin' \u0026gt;\u0026gt; ~/.profile\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3 id=\"troubleshooting\"\u003eTroubleshooting\u003c/h3\u003e\n\n\u003cp\u003eIf you are unable to move the binary, it is typically because you need super user rights, simple prepend the command with \u003ccode\u003esudo\u003c/code\u003e and try again.\u003c/p\u003e\n\n\u003cp\u003eIf you are confused about the command-line in general, please \u003ca href=\"https://linuxjourney.com/lesson/the-shell\"\u003esee this guide\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"windows\"\u003eWindows\u003c/h2\u003e\n\n\u003ch3 id=\"globally-1\"\u003eGlobally\u003c/h3\u003e\n\n\u003cp\u003eFirst navigate \u003ccode\u003eC:\\Program Files\\\u003c/code\u003e and create a new folder called \u003ccode\u003ehkn\u003c/code\u003e, then place the downloaded file in the newly created folder and rename it to \u003ccode\u003ehkn.exe\u003c/code\u003e.\nYou should now have the following folder structure \u003ccode\u003eC:\\Program Files\\hkn\\hkn.exe\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"locally-1\"\u003eLocally\u003c/h3\u003e\n\n\u003cp\u003eNavigate to your home folder, e.g. \u003ccode\u003eC:\\Users\\Emily\u003c/code\u003e, create a folder called \u003ccode\u003ehkn\u003c/code\u003e, then place the downloaded file in the newly created folder and rename it to \u003ccode\u003ehkn.exe\u003c/code\u003e.\nYou should now have the following folder structure \u003ccode\u003eC:\\Users\\Emily\\hkn\\hkn.exe\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"rest-of-the-installation-environment-variables\"\u003eRest of the installation (environment variables)\u003c/h3\u003e\n\n\u003cp\u003eWhen this is done, the next thing is to add it to your \u003ccode\u003ePATH\u003c/code\u003e.\nUnlike Linux/OSX, on Windows this is done best using the graphical interface.\nTo do this, first your need to open your \u003ccode\u003eFile Explorer\u003c/code\u003e, and make sure you are under where all you disks are listed.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-step1.png\" alt=\"Windows step 1\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-step2.png\" alt=\"Windows step 2\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNow click on \u003ccode\u003eAdvanced system settings\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-step3.png\" alt=\"Windows step 3\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNow click on \u003ccode\u003eEnvironment Variables\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-step4.png\" alt=\"Windows step 4\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNow you can should be presented with this screen.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-step5.png\" alt=\"Windows step 5\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNow you can either chose to create a new \u003ccode\u003eUser variable\u003c/code\u003e for your user, which should be done if you did the local install above, or you can chose to create a new \u003ccode\u003eSystem variable\u003c/code\u003e which should be done if you did the global install.\u003c/p\u003e\n\n\u003cp\u003eFor the \u003ccode\u003eUser variable\u003c/code\u003e, click \u003ccode\u003eNew\u003c/code\u003e in the first box, then fill it with your information.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-user-step1.png\" alt=\"Windows user step 1\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-user-step2.png\" alt=\"Windows user step 2\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFor the \u003ccode\u003eSystem variable\u003c/code\u003e, click \u003ccode\u003eNew\u003c/code\u003e in the second box, then fill it as follows.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-glob-step1.png\" alt=\"Windows glob step 1\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"../../../assets/images/haaukins/win-glob-step2.png\" alt=\"Windows glob step 2\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNow you can just open your \u003ccode\u003ecmd\u003c/code\u003e or \u003ccode\u003epowershell\u003c/code\u003e, type \u003ccode\u003ehkn\u003c/code\u003e and you should be all good to go!\u003c/p\u003e\n\n\u003ch2 id=\"cli-format-guideline\"\u003eCLI Format Guideline\u003c/h2\u003e\n\n\u003cp\u003eThis page shows the design principles for the cli command format and should therefore be read when implementing new features for the cli client.\u003c/p\u003e\n\n\u003ch3 id=\"format\"\u003eFormat\u003c/h3\u003e\n\n\u003cp\u003eThe following structure is used for \u003cem\u003eALL\u003c/em\u003e commands.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ehkn \u0026lt;entity\u0026gt; \u0026lt;action\u0026gt; \u0026lt;args\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ewhere \u003ccode\u003ehkn\u003c/code\u003e is the binary, \u003ccode\u003eentity\u003c/code\u003e refers to the entity type, \u003ccode\u003eaction\u003c/code\u003e the action to and \u003ccode\u003eargs\u003c/code\u003e the required and optional arguments for the \u003ccode\u003eentity\u003c/code\u003e and \u003ccode\u003eaction\u003c/code\u003e pair.\nNote that the available actions are dependent on the selected entity, and the available arguments are dependent on the selected entity and action.\u003c/p\u003e\n\n\u003ch3 id=\"entities\"\u003eEntities\u003c/h3\u003e\n\n\u003cp\u003eExamples of entities are as follows:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ehkn user ...\nhkn exercise ...\nhkn event ...\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3 id=\"actions\"\u003eActions\u003c/h3\u003e\n\n\u003cp\u003eExamples of actions are as follows:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ehkn user create ...\nhkn exercise reset ...\nhkn event list ...\nhkn group list ...\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3 id=\"arguments\"\u003eArguments\u003c/h3\u003e\n\n\u003cp\u003eThe required and optional arguments vary per entity and action pair.\nHowever, use the following principles:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eWhen an identifier refers to the entity in the command, it must be a required argument.\nFor illustration, the \u003ccode\u003esql\u003c/code\u003e identifier refers to the \u003ccode\u003eexercise\u003c/code\u003e entity:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ehkn exercise update sql\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eWhen an identifier does not refer to the entity in the command, it need to be specified as a flag.\nIn the following example, the \u003ccode\u003esql\u003c/code\u003e exercise must be reset for group \u003ccode\u003egroup1\u003c/code\u003e from event \u003ccode\u003eevent1\u003c/code\u003e.\nNote that this principle holds for both required and optional arguments.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ehkn exercise reset sql -e event1 -g group1\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"identifiers\"\u003eIdentifiers\u003c/h3\u003e\n\n\u003cp\u003eWe use the following identifiers\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eEntity\u003c/th\u003e\n\u003cth\u003eIdentifier\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eevent\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eEach event has a subdomain that is used to route traffic by \u003ccode\u003eHaaukins\u003c/code\u003e. This subdomain is used as an event\u0026rsquo;s identifier.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eexercise\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eIn the exercise definition file, each exercise has a tag list, and these tags can be used to identify exercises in the cli.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003egroup\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eA unique identifier will be generated for groups. In order to get a group\u0026rsquo;s identifier, use a \u003ccode\u003elist\u003c/code\u003e command (see example below).\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch4 id=\"examples\"\u003eExamples\u003c/h4\u003e\n\n\u003cp\u003eList all groups in the event \u003ccode\u003eev1\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ hkn group list -ev ev1\nGROUP ID         NAME              EMAIL\nf58a13m          BestTeam          kh@es.aau.dk\njg018do          WorstTeam         tkp@es.aau.dk\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCreate a new event called \u003ccode\u003eevent1\u003c/code\u003e with tag \u003ccode\u003eev1\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ hkn event create event1 -t ev1\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eReset the SQL injection exercise for group \u003ccode\u003eBestTeam\u003c/code\u003e in event \u003ccode\u003eev1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ hkn exercise reset sql -e ev1 -g f58a13m\nResetting exercises..\nDone!\n\u003c/code\u003e\u003c/pre\u003e\n"},{id:6,href:"/docs/haaukins/introduction/",title:"Introduction",description:"Haaukins Platform",content:"\n\n\u003cp\u003eHaaukins is a highly accessible and automated virtualization platform for security education, it has three main components (Docker, Virtualbox and Golang), the communication and orchestration between the components managed using Go programming language. The main reason of having Go environment to manage and deploy something on Haaukins platform is that Go’s easy concurrency and parallelism mechanism. Want to get more insight about architecture of Haaukins visit \u003ca href=\"https://github.com/aau-network-security/haaukins/wiki/Architecture-of-Haaukins\"\u003earchitecture page\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOur primary aim to involve anyone who desire to learn capturing the flag concept in cyber security which is widely accepted approach to learn how to find vulnerability on a system. Despite of all existing platform, Haaukins provides its own virtualized environment to you with operating system which designed to find vulnerabilities\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#prerequisites\"\u003e\u003cstrong\u003ePrerequisites\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#installation\"\u003e\u003cstrong\u003eInstallation\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-dependencies\"\u003e\u003cstrong\u003eGetting Dependencies\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#testing\"\u003e\u003cstrong\u003eTesting\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#re-compile-proto\"\u003e\u003cstrong\u003eRe-compile proto\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#version-release\"\u003e\u003cstrong\u003eVersion release\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#known-issues\"\u003e\u003cstrong\u003eKnown issues\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#contributing\"\u003e\u003cstrong\u003eContributing\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#event-requests\"\u003e\u003cstrong\u003eEvent requests\u003c/strong\u003e\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#event-requests-form\"\u003eEvent Requests Form\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#credits\"\u003e\u003cstrong\u003eCredits\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#license\"\u003e\u003cstrong\u003eLicense\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"prerequisites\"\u003e\u003cstrong\u003ePrerequisites\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe following dependencies are required and must be installed separately in order to run daemon in your local environment.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLinux\u003c/li\u003e\n\u003cli\u003eDocker\u003c/li\u003e\n\u003cli\u003eGo 1.13+\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere is no prerequisites for installing client to your environment.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Linux can be used in virtualized environment as well.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"installation\"\u003e\u003cstrong\u003eInstallation\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eTo install daemon or client of Haaukins,  there are some options, via binary files, which are ready to use, visit \u003ca href=\"https://github.com/aau-network-security/haaukins/releases\"\u003ereleases\u003c/a\u003e page.\u003c/p\u003e\n\n\u003cp\u003eMore information about installation process, checkout following pages ;\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"../installation.md/#client-installation\"\u003eInstallation for client\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"../installation/#server-installation\"\u003eConfiguration for daemon\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThere are some configuration files to configure daemon, those configuration files should be in same directory with the binary file that you have just downloaded from \u003ca href=\"https://github.com/aau-network-security/haaukins/releases\"\u003ereleases\u003c/a\u003e page.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eWant to try daemon on you local computer with pre-configured vagrant file check out this \u003ca href=\"https://github.com/aau-network-security/sec0x\"\u003erepo\u003c/a\u003e for more information.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"getting-dependencies\"\u003e\u003cstrong\u003eGetting Dependencies\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eHaaukins platform uses \u003ccode\u003ego modules\u003c/code\u003e since version \u003ca href=\"https://github.com/aau-network-security/haaukins/releases/tag/1.6.4\"\u003e1.6.4\u003c/a\u003e, hence it is quite easy to manage dependencies, you just need to run \u003ccode\u003ego mod download\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"testing\"\u003e\u003cstrong\u003eTesting\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eMake sure that you are in \u003ccode\u003e$GOPATH/src/github.com/aau-network-security/haaukins/\u003c/code\u003e directory, to run all test files, following command can be used\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ego test -v -short ./...\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"re-compile-proto\"\u003e\u003cstrong\u003eRe-compile proto\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eHaaukins platform uses gRPC on communication of client and daemon, so after updating the protocol buffer specification (i.e. daemon/proto/daemon.proto), corresponding golang code generation is done by doing the following:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ecd $GOPATH/src/github.com/aau-network-security/haaukins/daemon/\nprotoc -I proto/ proto/daemon.proto --go_out=plugins=grpc:proto\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"version-release\"\u003e\u003cstrong\u003eVersion release\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn order to release a new version, run the \u003ccode\u003escript/release/release.go\u003c/code\u003e script as follows (choose depending on type of release):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ go run $GOPATH/src/github.com/aau-network-security/haaukins/scripts/release/release.go major\n$ go run $GOPATH/src/github.com/aau-network-security/haaukins/scripts/release/release.go minor\n$ go run $GOPATH/src/github.com/aau-network-security/haaukins/scripts/release/release.go patch\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe script will do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBump the version in \u003ccode\u003eVERSION\u003c/code\u003e and commit to git\u003c/li\u003e\n\u003cli\u003eTag the current \u003ccode\u003eHEAD\u003c/code\u003e with the new version\u003c/li\u003e\n\u003cli\u003eCreate new branch(es), which depends on the type of release.\u003c/li\u003e\n\u003cli\u003ePush to git\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTravis automatically creates a release on GitHub and deploys on \u003ccode\u003eserver\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote: by default the script uses the \u003ccode\u003e~/.ssh/id_rsa\u003c/code\u003e key to push to GitHub.\nYou can override this settings by the \u003ccode\u003eHKN_RELEASE_PEMFILE\u003c/code\u003e env var.\u003c/p\u003e\n\n\u003ch2 id=\"known-issues\"\u003e\u003cstrong\u003eKnown issues\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eGive a  moment and check known issues over \u003ca href=\"https://github.com/aau-network-security/haaukins/issues\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"contributing\"\u003e\u003cstrong\u003eContributing\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eHaaukins is an open source project and built on the top of open-source projects. If you are interested, then you are welcome to contribute.\u003c/p\u003e\n\n\u003cp\u003eCheck out the \u003ca href=\"https://github.com/aau-network-security/haaukins/blob/master/.github/CONTRIBUTING.md\"\u003eContributing Guide\u003c/a\u003e to get started.\u003c/p\u003e\n\n\u003ch2 id=\"event-requests\"\u003e\u003cstrong\u003eEvent requests\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003eAs AAU, we believe in power of open source community and would like to offer test our platform for organizations and events , if you would like to get your own domain which will be assigned by us please fill following the form and contact us in advance.\nAfter having your application, we will back to you as soon as possible\u003c/p\u003e\n\n\u003ch3 id=\"event-requests-form-https-docs-google-com-forms-d-e-1faipqlseyftle-29afck00hshpu5nwt7qmwyd42yb76abioimcewdrg-viewform\"\u003e\u003ca href=\"https://docs.google.com/forms/d/e/1FAIpQLSeyFTle_29Afck00hSHPU5nWT7QMWYd42yB76ABIoIMCewdRg/viewform\"\u003eEvent Requests Form\u003c/a\u003e\u003c/h3\u003e\n\n\u003ch2 id=\"credits\"\u003e\u003cstrong\u003eCredits\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLogo designed by \u003ca href=\"https://www.behance.net/independenthand\"\u003eindepedenthand\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"license\"\u003e\u003cstrong\u003eLicense\u003c/strong\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/aau-network-security/haaukins/blob/master/LICENSE\"\u003eGNU\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eCopyright \u0026copy; 2019-present, Haaukins\u003c/p\u003e\n"},{id:7,href:"/docs/challenges/reverse-engineering/",title:"Reverse Engineering",description:"Reverse Engineering challenges for Haaukins Platform",content:"\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#reverse-engineering\"\u003eReverse Engineering\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#difficulty-levels\"\u003eDifficulty Levels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#weird-code\"\u003eWeird Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conditional-reverse-engineering\"\u003eConditional Reverse Engineering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#reverse-apk\"\u003eReverse APK\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#pwn_strings\"\u003ePWN_strings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#c0ffee-0verfl0w\"\u003eC0ffee 0verfl0w\u003c/a\u003e\n\u003c!-- - [Program Behaviour](#program-behaviour) --\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"reverse-engineering\"\u003eReverse Engineering\u003c/h1\u003e\n\n\u003cp\u003eIt is typically the process of taking a compiled (machine code,\n bytecode) program and converting it back into a more human readable format.\u003c/p\u003e\n\n\u003ch3 id=\"difficulty-levels\"\u003eDifficulty Levels\u003c/h3\u003e\n\n\u003cp\u003eThe levels of difficulty scale is based on the number of steps required in order to solve the\nTraining Challenge\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eVery Easy​:\u003c/strong\u003e It requires just one step in order to get the flag\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEasy:\u003c/strong\u003e​ It requires one-two steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMedium​:\u003c/strong\u003e It requires two-three steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHard:\u003c/strong\u003e ​It requires three-four steps based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVery Hard:\u003c/strong\u003e​ It requires several steps in order to get the flag\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"weird-code\"\u003eWeird Code\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 25 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn the basic syntax of Go Programming language\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​This is a Code-base challenge in which the user will have access to an FTP\nserver in order to download a source code file. The user have to gather the piece of flag\nspread over the tricky source code in order to solve the challenge.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Basic concepts of a programming language\u003c/p\u003e\n\n\u003ch2 id=\"conditional-reverse-engineering\"\u003eConditional Reverse Engineering\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 30 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn what coupled if statements looks like in assembly.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​This challenge is an easy reverse engineering challenge. A binary called StringToHexConverter takes in a text string as an argument.\nNormally It would just return the hex string that you could put straight into a printf(). Example could be writing Hello\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ./StringToHexConverter Hello\n\\x48\\x65\\x6C\\x6C\\x6F\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWriting a very specific string will make the program print the flag in the terminal.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Little knowledge in assembly language\n- Know how to run GDP\u003c/p\u003e\n\n\u003ch2 id=\"reverse-apk\"\u003eReverse APK\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 20 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn how to decompile an APK and read smali files.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nThe user has to download an APK from a website and reverse engineer the APK to read the source code of the file in order to solve the challenge.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of how an android project is structured.\u003c/p\u003e\n\n\u003ch2 id=\"pwn-strings\"\u003ePWN_strings\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 20, 42 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Easy, Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn how to disassemble and do forensics on binaries, to be able crack the executable binary.\u003cbr /\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nThis is a simple reverse engineering challenge composed of two challenges. Further investigation by applying the right tools for reverse engineering binaries will unveil more information on how to find the first and second flags.\n1. Strings_everywhere\u003cbr /\u003e\n    Difficulty: Easy\u003cbr /\u003e\n    The binary for the callenge can be found and downloaded from \u003ccode\u003epwn-strings.com\u003c/code\u003e website. The tools used to find the frist flag in the frist part of the challenge is \u003ccode\u003estrings\u003c/code\u003e, \u003ccode\u003egrep\u003c/code\u003e or a different tool to extract strings in binaries.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOWN_if_statement\u003cbr /\u003e\nDifficulty: Medium\u003cbr /\u003e\nThe binary for the callenge can be found and downloaded from \u003ccode\u003epwn-strings.com\u003c/code\u003e website. The tools used to find the second flag is debugging software such as \u003ccode\u003egdb\u003c/code\u003e or other disassembly software such as radare2(r2).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Know how to use gdb (GNU Debugger) or radare2 (Reverse Engineering Framework)\u003cbr /\u003e\n- Basic understanding of Assembler instructions in 32-bit\u003c/p\u003e\n\n\u003ch2 id=\"c0ffee-0verfl0w\"\u003eC0ffee 0verfl0w\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 42 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn how to take advantage of a buffer overflow/overrun. Another objective is to do forensics on the binary and decrypt the prices of successfully exploiting the overflow\u003cbr /\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nThe challenge is a buffer overflow challenge. To retrieve the flag a buffer must be exploited correctly. A string will be presented when successfully exploited which then must be decrypted and deobfuscated from two formats namely, from hex and from base85 to obtain the flag.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eC0ffee_0verfl0w\u003cbr /\u003e\nDifficulty: Medium\u003cbr /\u003e\nBrowse C0ffee-0verfl0w.com and download the binary. When the binary has been exploited succesfully you will receive an encrypted flag. Decrypt the flag with openssl using the key; ThisMightBecomeHandy42. Algorithm used is AES256 and the cipher text is base64 encoded.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Know how to use r2/radare2(Reverse Engineering Framework) or gdb (GNU Debugger)\n- Basic understanding of Assembler instructions in 32-bit\u003cbr /\u003e\n- Basic understanding of encryption/decryption schemes and string formats\u003c/p\u003e\n"},{id:8,href:"/docs/challenges/starters/",title:"Starters",description:"Starter challenges on Haaukins Platform",content:""},{id:9,href:"/docs/haaukins/testing/",title:"Testing",description:"Haaukins Platform",content:"\u003cp\u003ePlease stick to using Go\u0026rsquo;s \u003ca href=\"https://golang.org/pkg/testing/\"\u003etesting package\u003c/a\u003e conventions.\u003c/p\u003e\n\n\u003cp\u003eBefore using any third party libraries for testing, please make sure they are strictly necessary.\u003c/p\u003e\n\n\u003cp\u003eFor integration tests, use the practice described \u003ca href=\"https://stackoverflow.com/a/41407042\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eTLDR: Use \u003ccode\u003ego test -short ./...\u003c/code\u003e (unit tests only) mostly. Use \u003ccode\u003ego test ./...\u003c/code\u003e for full testing suite (including integration tests).\u003c/p\u003e\n"},{id:10,href:"/docs/challenges/web-exploitation/",title:"Web Exploitation",description:"Web Exploitation challenges for Haaukins Platform",content:"\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"#web-exploitation\"\u003eWeb Exploitation\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#difficulty-levels\"\u003eDifficulty Levels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sql-injections\"\u003eSQL Injections\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sql-injection\"\u003eSQL Injection\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sql-users\"\u003eSQL Users\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sql-easy\"\u003eSQL Easy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#micro-cms-xxs--url-and-robots\"\u003eMicro CMS XXS , URL and robots\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#heartbleed\"\u003eHeartbleed\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#exposed-logging-login-blogging\"\u003eExposed Logging Login Blogging\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cross-site-request-forgery\"\u003eCross-Site Request Forgery\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#phishing\"\u003ePhishing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#convince-visitation-of-url\"\u003eConvince visitation of URL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#impersonate-colleague\"\u003eImpersonate colleague\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#abuse-credentials\"\u003eAbuse Credentials\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#hijack-domain\"\u003eHijack Domain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cross-site-scripting\"\u003eCross-Site Scripting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#unauthenticated-access\"\u003eUnauthenticated ​Access\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#remote-access\"\u003eRemote Access\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#bust-n-crack\"\u003eBust-N-Crack\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#jwt\"\u003eJWT\u003c/a\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"#deeplink\"\u003eDeeplink\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"web-exploitation\"\u003eWeb Exploitation\u003c/h1\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis category includes all the challenges that provide a vulnerable website, from the ones that\n contains a bug to the ones that run over an old version of a framework. All the challenges in this category show up in a kind of challenge in which the user need to exploit a bug to gain some kind of higher level privilege.\u003c/p\u003e\n\n\u003ch3 id=\"difficulty-levels\"\u003eDifficulty Levels\u003c/h3\u003e\n\n\u003cp\u003eThe levels of difficulty scale is based on the number of steps required in order to solve the\nTraining Challenge\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eVery Easy​:\u003c/strong\u003e It requires just one step in order to get the flag\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEasy:\u003c/strong\u003e​ It requires one-two steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMedium​:\u003c/strong\u003e It requires two-three steps, it is based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHard:\u003c/strong\u003e ​It requires three-four steps based on the challenge category\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVery Hard:\u003c/strong\u003e​ It requires several steps in order to get the flag\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"sql-injections\"\u003eSQL Injections\u003c/h2\u003e\n\n\u003ch3 id=\"sql-injection\"\u003eSQL Injection\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 50 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Understand how an SQL attack is performed\n- SQL language and its syntax\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​In this challenge, the HAAUKINS user is expected to utilise knowledge about\nweb service communication. When accessing and logging into the website in challenge “1.3:\nWeb server login”, it should be noticed that the presented home screen includes a\ncomments field. When posting a comment this is shown on the website page, which\nillustrates that database communication is active. After this realisation the user is expected\nto form an abusive SQL query and exploit the comments field to access passwords from the\ndatabase users table.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Understand the fundamentals of database communication (SQL)\u003c/p\u003e\n\n\u003ch3 id=\"sql-users\"\u003eSQL Users\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 26 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn a bit of pen testing workflow(Enumeration).\n- Learn the importance of sanitizing inputs during development.\n- Learn the basic idea of SQL injections\n\u003cstrong\u003eDescription:\u003c/strong\u003e ​Use SQL injections to bypass the owner of the page\u0026rsquo;s password\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Understand the fundamentals of database communication (SQL)\u003c/p\u003e\n\n\u003ch3 id=\"sql-easy\"\u003eSQL Easy\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 18 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Understand how an SQL attack is performed\n- SQL language and its syntax\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​In this exercise the user will need to find the place where the website is vulnerable to SQL injections and use this in order to change the credentials of the first user in the users table and use these to login and find the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Understand the fundamentals of database communication (SQL)\u003c/p\u003e\n\n\u003ch2 id=\"micro-cms-xxs-url-and-robots\"\u003eMicro CMS XXS , URL and robots\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 10-14-18 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Very easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Lean how much is it important to sanitize the data submitted through a form\n- Manage and Modify the URL\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e I have implemented a basic Content Management System (CMS) in which the user is faced with an interface in which they can create and edit web pages.\nThe main goal of this challenge is to let the user understand how an XSS works and also how is possible to retrieve data managing the URL.\nOn this challenge the user has to find three flags (the order doesn\u0026rsquo;t matter):\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Know how an Cross-Site Scripting (XSS) works\u003c/p\u003e\n\n\u003ch2 id=\"heartbleed\"\u003eHeartbleed\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 16 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Achieve confidence using the Metasploit framework\n- Understand that also encrypted web traffic (HTTPS) can be exploited\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​In this challenge, the HAAUKINS user is expected to complete an attack\nabusing the famous Heartbleed Bug, that is a serious vulnerability in the popular OpenSSL\ncryptographic software library. This bug allows an attacker to access information otherwise\nprotected by SSL/TLS encryption. The user is expected to gather information about\nconducting a Heartbleed attack from Google, and subsequently configure a Metasploit\nsession to complete the exploit. The target host should be determined through an active\nnetwork scan.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Fundamentals in Linux terminal\n- Knowing what Metasploit is and its capabilities\u003c/p\u003e\n\n\u003ch2 id=\"exposed-logging-login-blogging\"\u003eExposed Logging Login Blogging\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e 20 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learning about the role of the robots.txt file on the web.\n- Learning about the danger of exposing sensitive data, such as logs, on a web site.\n- Learning how to crack MD5 hashes for other challenges.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nA logging file with weakly encrypted sensitive data is left exposed on a website, only protected by obscurity. Its location is revealed by the robots.txt file. Ultimately, the challenger can get a password by piecing together information in the logging file. Logging in and posting on the blog will reveal the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowing that \u0026lsquo;/\u0026rsquo; in URLs can be used to access different pages/resources on the same domain.\n- Ability to understand the basic relationship between a hash value and an original input.\u003c/p\u003e\n\n\u003ch2 id=\"cross-site-request-forgery\"\u003eCross-Site Request Forgery\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 36 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Gain a basic understanding of web APIs\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​In this challenge the user is expected to utilise knowledge about web service\ncommunication. After registering on the website the user should figure out that the people in\nthe chat is clicking on all links send. After realising this the user should use knowledge about\nweb APIs to create a link that will get the other users to send money in order to buy the flag.\u003c/p\u003e\n\n\u003ch2 id=\"phishing\"\u003ePhishing\u003c/h2\u003e\n\n\u003ch3 id=\"convince-visitation-of-url\"\u003eConvince visitation of URL\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 48 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Introduction to mail servers and protocols as ‘Simple Mail Transfer Protocol’, SMTP.\n- Mail clients and how to forward emails through a STMP server in a terminal.\n- Capturing POST requests\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​Social Engineering including spear phishing emails is very popular in the\nhacking community, because it’s a lot easier to hack a person than a computer. In this\nchallenge the HAAUKINS user shall try to trick a person into visiting a website of his choice.\nIn order to do that the user needs to know who to target; the first goal is to do some recon on\nthe network and websites. The next step is to send the target an email with an URL.\nHaaukins is a closed environment and the user will need to use a mail server running on the\nnetwork. The participants can see various flags (through traffic analysis) being exposed as\nthey conduct phishing against an email listed on the web server.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- It’s necessary to know how an SMTP server works and how to find services on a network\nlike web server and SMTP server (challenge 1.2).\u003c/p\u003e\n\n\u003ch3 id=\"impersonate-colleague\"\u003eImpersonate colleague\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 58 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to send a phishing email\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​This is phishing challenge in which the user shall try to trick a person into\nvisiting a website of his choice. In order to do that the user has to find the destination email\nby looking the network and the website. The user should let the destination email understand\nthat the email is from the same domain in order to get the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- \u003ca href=\"#convince-visitation-of-url\"\u003eConvince visitation of URL\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3 id=\"abuse-credentials\"\u003eAbuse Credentials\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 33 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Easy\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Introduction to mail servers and protocols as Simple Mail Transfer Protocol\n- Setup a simple web server with a custom HTML script\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​If a you can get a person to visit your website, maybe you can get him to input\ncredentials and hand it over to you? In this challenge the user will continue working on\nphishing, but he will learn that it’s a lot more than just sending some emails to important\npeople. He will need to trick them into passing confidential information without suspicion. He\ncan do this by cloning a website the victim is trusting and trick him visit it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- \u003ca href=\"#convince-visitation-of-url\"\u003eConvince visitation of URL\u003c/a\u003e\n- \u003ca href=\"#impersonate-colleague\"\u003eImpersonate colleague\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"hijack-domain\"\u003eHijack Domain\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 70 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Very hard\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how spoofing works\n- ARP Protocol\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​This is a phishing challenge in which the user has to hijack the challenge\ndomain. The user should redirect the traffic of the legitimate website to the kali machine in\norder to get the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- \u003ca href=\"#convince-visitation-of-url\"\u003eConvince visitation of URL\u003c/a\u003e\n- \u003ca href=\"#impersonate-colleague\"\u003eImpersonate colleague\u003c/a\u003e\n- \u003ca href=\"#abuse-credentials\"\u003eAbuse Credentials\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"cross-site-scripting\"\u003eCross-Site Scripting\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 55 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to gain unauthorized access on a website\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​The challenge consists of two machines a server and a client. The server hosts\na website with a comment section which is vulnerable to injecting JavaScript. The users has\nto use the section in order to steal the session cookie from the client, which visits the site\nfrom time to time. When they have stolen the cookie, then they can use it to gain authorized\naccess and find the flag.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- \u003ca href=\"#micro-cms-xxs-and-url\"\u003eMicro CMS\u003c/a\u003e\n- Know how the cookies work\u003c/p\u003e\n\n\u003ch2 id=\"unauthenticated-access\"\u003eUnauthenticated ​Access\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 20 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Hard\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Understanding of how HTTP headers works and how to manipulate them in order to get\nremote code execution access.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​The challenge provides to the user a website in which is installed an old\nversion of Joomla. This CMS suffers from an unauthenticated remote code execution that\naffects all versions from 1.5.0 to 3.4.5. It means any file on server can be accessible by\nsending commands, so in order to get flag from the server, users should be able to search\nfor it and then read it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge about HTTP requests and headers\n- Familiarity to Metasploit modules\u003c/p\u003e\n\n\u003ch2 id=\"remote-access\"\u003eRemote Access\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e ​ 65 \u003cstrong\u003eDifficulty:\u003c/strong\u003e ​Very hard\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Know how to use cURL\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ​The challenge provides to the user a website in which is installed an old\nversion of Webmin. Webmin is a web-based interface for system administration for Unix.\nUsing any modern web browser, it is possible to setup user accounts, Apache, DNS, file\nsharing and much more. This web-based interface suffers from an unauthenticated remote\ncode execution that affect the version 1.920. The main goal of the challenge is to get the flag\ncontained into a txt file making request through either command line i.e. curl or some Kali\nLinux tools\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Analyse Wireshark traffic\n- Know how to make an HTTP request from command line\u003c/p\u003e\n\n\u003ch2 id=\"bust-n-crack\"\u003eBust-N-Crack\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e 12-19 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn that it is important to configure a web server correct and clean up old files\n- Learn how to crack a private ssh key\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\nIn this exercise contains a host running SSH and and HTTP, the user will then need to use dirbuster to find the directories that is exposed by the web server.\nThe user should then find a directory containing the first flag and a ssh-key.\nThe ssh-key is protected by a password which can be cracked by using john the ripper.\nAfter finding the password the key can be used to login to the server.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of john the ripper/password cracking\n- Knowledge of dirbuster\u003c/p\u003e\n\n\u003ch2 id=\"jwt\"\u003eJWT\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e 30 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to exploit JWT\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\nThis challenge is based on the JSON Web Token. The user just need to log in to access the main page, any name can\nbe used except admin.\nOnce logged in, from the network console of the browser it is possible to notice a Cookie called jwt. That cookie\nallows the user to change the session, so in order to solve the challenge a request with a different cookie value has to\nbe sent.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- Knowledge of JSON Web Token\n- Know how to crack an hashed password with Kali Linux\n- Knowledge of Curl, Burpsuite or any other software which can forge http requests.\u003c/p\u003e\n\n\u003ch2 id=\"deeplink\"\u003eDeeplink\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003ePoints:\u003c/strong\u003e 48 \u003cstrong\u003eDifficulty:\u003c/strong\u003e Medium\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLearning Objectives:\u003c/strong\u003e\n- Learn how to exploit deeplinks.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nThis challenge is based on android intent that allows other apps and the browser to link to specifik sites in the app.\nThe intent can be exploited to load something else in the app.\u003c/p\u003e\n\n\u003cp\u003eSo with a website it is possible to call other functions inside the app.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisite:\u003c/strong\u003e\n- reverse an APK\n- create a simple website\u003c/p\u003e\n"},{id:11,href:"/docs/challenges/challenge-struct/",title:"A Challenge Struct",description:"A Challenge structure described.",content:"\n\n\u003ch1 id=\"repository-title\"\u003eRepository title\u003c/h1\u003e\n\n\u003cp\u003eDescribe what the challenge is about, any relevant CVE\u0026rsquo;s, which tools should be used for the challenge, etc.\u003c/p\u003e\n\n\u003ch1 id=\"domain-name\"\u003eDomain name\u003c/h1\u003e\n\n\u003cp\u003eIf the challenge does not have NMAP as a part of the challenge, the general rule of thumb is, that it should have a domain name. This is to easily distinguish challenges from each other when there is a lot of them running on the platform.\nThe domain name should then also be included in the challenge description(s) for the user to easily access the challenge.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003edomain-name-here.com\u003c/code\u003e\u003c/p\u003e\n\n\u003ch1 id=\"descriptions\"\u003eDescriptions\u003c/h1\u003e\n\n\u003cp\u003eThe challenge descriptions are what is actually going to be displayed on the platform, and it should have a challenge name and a description for each flag the challenge haves;\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eName of challenge_1\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eProposed difficulty: \u0026ldquo;Whatever difficulty you beleive that the challenge is\u0026rdquo;\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eThis should be the description of the challenge for the first flag in multi flag challenges. This is also here the user should be instructed to browse a specific domain and protocol in order to find the challenge.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eName of challenge_2\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eProposed difficulty: \u0026ldquo;Whatever difficulty you beleive that the challenge is\u0026rdquo;\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eDescription here\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eName of challenge_n\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eProposed difficulty: \u0026hellip;\u0026hellip;\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eDescription here\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"prerequisites-and-outcome\"\u003ePrerequisites and Outcome\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003ePrerequisites\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSome prerequisite\u003c/li\u003e\n\u003cli\u003eSome prerequisite\u003c/li\u003e\n\u003cli\u003eSome prerequisite\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutcome\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSome Outcome\u003c/li\u003e\n\u003cli\u003eSome Outcome\u003c/li\u003e\n\u003cli\u003eSome Outcome\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"how-to-run-on-local-machine\"\u003eHow to run on local machine\u003c/h1\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ git clone https://gitlab.com/haaukins/challenge_category/challengerepo.git\n$ cd challengerepo\n$ docker build -t cd challengerepo .\n$ docker run -d -p port:port -e APP_FLAG=\u0026quot;FLAG1\u0026quot; -e APP_FLAG2=\u0026quot;FLAG2\u0026quot; -e APP_FLAGn=\u0026quot;FLAGn\u0026quot; challengerepo\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch1 id=\"solutions\"\u003eSolutions\u003c/h1\u003e\n\n\u003ch2 id=\"flag1\"\u003eFlag1\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite the solution in bulletpoints for each step the user should take.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"flag2\"\u003eFlag2\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite the solution in bulletpoints for each step the user should take.\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:12,href:"/docs/challenges/how-to-create-chal/",title:"How to Create A Challenge",description:"Creation of an challenge for Haaukins Platform described here.",content:"\n\n\u003ch1 id=\"creating-a-challenge\"\u003eCreating a Challenge\u003c/h1\u003e\n\n\u003cp\u003eA challenge is created as a subfolder in its category folder. A sample challenge folder is \u003ccode\u003esample/piece_of_pie/\u003c/code\u003e with the contents below:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eexample/challenge_1/\n|-- README.md\n|-- Dockerfile\n|-- .gitlab-ci.yml\n|-- tests\n    `-- test_exploit.py\n|-- sol/\n|   `-- exploit.py\n|-- config (or src) /\n     |-- auto.conf\n     |-- init.sh\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs above, the challenge folder must have:\n* The challenge folder should contain following information and main \u003ccode\u003eREADME.md\u003c/code\u003e file. You can follow \u003ca href=\"../challenge-structure/\"\u003eChallenge Repository Structure \u003c/a\u003e for an example of how the readme file should be setup for your challenge;\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003econfig (or src)/\u003c/code\u003e subfolder used for setting up environment for the challenge. This includes startup scripts and challenge source code (C, C#, python or whatever you chose).\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003esol (or exploit)/\u003c/code\u003e subfolder containing the solution/exploit script. Only if applicable to your challenge\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003etests/\u003c/code\u003e subfolder which will test functions which are given under \u003ccode\u003esol/\u003c/code\u003e. Or manually unittesting your challenge can also be done. You just have to ensure that every bit and piece of the challenge works before pushing it to our registry.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"technical-side-of-creating-challenge\"\u003eTechnical side of creating challenge\u003c/h2\u003e\n\n\u003cp\u003eImagine a situation where you are using a framework in your infrastructure which is vulnerable and the exploit has been published on \u003ca href=\"https://www.exploit-db.com\"\u003ehttps://www.exploit-db.com\u003c/a\u003e. In order to experience what you may face by having that vulnerability,  a simulation environment could be set up by using docker containers. Steps could differ challenge to challenge however, most of the steps are same for all kind of challenges. Prerequisites of creating a challenge consists of having knowledge about docker environment and basic programming skills.\u003c/p\u003e\n\n\u003cp\u003eSteps for creating a challenge could be summarized as shown below:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a challenge to create, let\u0026rsquo;s consider the one which is \u003ccode\u003eWebmin 1.920 - Unauthenticated Remote Code Execution (Metasploit)\u003c/code\u003e (\u003ca href=\"https://www.exploit-db.com/exploits/47230\"\u003ehttps://www.exploit-db.com/exploits/47230\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eIn order to create the given challenge, examine layers (environment ~ operating system, specific version of program and etc ) which could be needed to run vulnerable \u003ccode\u003eWebmin\u003c/code\u003e on docker container.\u003c/li\u003e\n\u003cli\u003eOnce all explanation is examined through \u003ca href=\"https://www.exploit-db.com\"\u003ehttps://www.exploit-db.com\u003c/a\u003e, make a list of them and started to implement on docker file.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cem\u003eLinux operating system (could Ubuntu 18.04 ) since there is no specification of the version of operating system which will handle php on it\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eThe vulnerability itself requires to have perl language on top of operating system therefore it will be the second step to install.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eSince the mentioned vulnerability requires webmin 1.920 version then, it should be installed it by using install instructions which are already exists on webmin official page. Just install it using source code, in order to have vulnerability in a containerized environment.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eAfterwards all configuration settings will be based on kind of challenge that you are writing, define bash script which handles all configuration things regarding to webmin, php, perl.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eIn bash script, an environment variable should be declared in order to provide it to Haaukins itself, so the provided environment variable will be used to create dynamic flags. Example:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$APP_FLAG\u003c/code\u003e , in Haaukins side, Haaukins will generate unique UUID flag for given environment variable.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExample Dockerfile for a challenge which describes how the vulnerability of \u003ccode\u003ewebmin 1.920\u003c/code\u003e framework can be simulated using dockerfile.\u003c/p\u003e\n\n\u003cp\u003eBefore starting to write Dockerfile, you either need to download the package to your local and copy it into container or you can fetch that using \u003ccode\u003ecurl\u003c/code\u003e and download it into container directly. In this example, we are assuming that you have already downloaded the freamwork (webmin 1.920)\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eDockerfile\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eFROM ubuntu:18.04   // this is base layer for our containerized environment...\nFROM perl:5.20      // adding additional software on top of base layer in order to run webmin, so this is a prerequisite\nCOPY webmin-1.920.tar.gz  .  // which is copying tar.gz file into container.\n\nRUN gunzip  webmin-1.920.tar.gz \u0026amp;\u0026amp; \\\n    tar xf wembin-1.920.tar \u0026amp;\u0026amp; \\\n    cd webmin-1.920 \u0026amp;\u0026amp; \\\n    ./setup.sh  /usr/local/webmin    //  setup.sh is default setup script for webmin-1.920, so it is already inside tar.gz\n\nCOPY /etc/webmin/config .           // copying configuration files into docker container\nCOPY /etc/webmin/miniserv.conf .    // copying configuration files into docker container\n\nCOPY run.sh .  // this is the bash script where all configuration files has been set with the flag.\n\nRUN chmod +x run.sh  // change permission of the run.sh script\n\nCMD [\u0026quot;./run.sh\u0026quot;]   // starting point of webmin-1.920 framework.\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003erun.sh\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n#!/bin/sh\n\ncp config /etc/webmin\ncp miniserv.conf /etc/webmin\necho \u0026quot; $APP_FLAG\u0026quot; \u0026gt;\u0026gt; /var/flag.txt\nunset APP_FLAG                # this is crucial to unset, otherwise a user can print all environment variables and can get the flag.\necho Starting webmin\n/etc/init.d/webmin start\nwhile :; do echo 'Press \u0026lt;CTRL+C\u0026gt; to exit.'; sleep 1; done  \n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eMore things to keep in mind, the networking setting should not be overlap, otherwise, the challenge cannot be imported into Haaukins environment properly. Please consider following matters as well, while constructing a challenge in a containerzed environment.\u003c/p\u003e\n\n\u003cp\u003eGenerally, challenges can consist of any set of docker images and VirtualBox OVA\u0026rsquo;s. However, these images are constrained by the following\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThey will reside on the same /24 subnet, that in unknown to the images prior to boot.`\u003c/li\u003e\n\u003cli\u003eMake sure DNS records used for service discovery is fairly unique, to avoid colliding records with other challenges.\u003c/li\u003e\n\u003cli\u003eDocker images that are supposed to contain flags should ideally be able to receive a dynamic flag through the APP_FLAG  environment variable (or another environment variable specified in the challenge config).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNote that the given examples differs challenge to challenge, however the concept is same, build vulnerable enviroment in docker (containerized docker environment) and then set flag environment into a file or somewhere, lastly do not forget to unset flag from environment once setting the flag to a file process is done.\u003c/p\u003e\n\n\u003cp\u003eFor further assistance, please contact us by creating an issue regarding to creating  a challenge, under wiki (this repository).\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(Please declare your situation as much detalied as possible, otherwise we may face a deadlock where nobody can benefit from it. )\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2 id=\"deploying-a-challenge\"\u003eDeploying a Challenge\u003c/h2\u003e\n\n\u003cp\u003eDeploying challenges from gitlab is very easy, you can use the following template and put it into the \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file;\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edocker-push-to-gitlab-registery:\n  image: docker:latest\n  stage: build\n  services:\n    - docker:dind\n  before_script:\n    - docker login -u \u0026quot;$CI_USER\u0026quot; -p \u0026quot;$CI_TOKEN\u0026quot; $GITLAB_REGISTERY\n  script:\n    - docker build --pull -t \u0026quot;$GITLAB_REGISTERY/haaukins/challenge_category/challengerepo\u0026quot; .\n    - docker push \u0026quot;$GITLAB_REGISTERY/haaukins/challenge_category/challengerepo\u0026quot;\n  only:\n    - master\n\u003c/code\u003e\u003c/pre\u003e\n"},{id:13,href:"/docs/help/troubleshooting/",title:"Troubleshooting Haaukins",description:"Solutions to common problems on Haaukins Platform",content:"\n\n\u003cp\u003eIn this guideline, the way of handling troubles and possible reasons of troubles will be explained with some solutions.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThe issues that you may face during active usage of Haaukins\u003c/em\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#no-space-left-on-device\"\u003eNo space left on device\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#vm-import-failed\"\u003eVM Import failed\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#import-vm-failed-due-to-no-space\"\u003eImport VM failed due to no space\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#create-data-folder-for-each-user-on-the-system\"\u003eCreate data folder for each user on the system\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#config-file-not-found\"\u003eConfig file not found\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#guacamole-500-error\"\u003eGuacamole 500 Error\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#pool-overlaps-with-other-one-on-this-address-space\"\u003ePool overlaps with other one on this address space\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#prune-system\"\u003ePrune System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#prune-volumes\"\u003ePrune volumes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#unable-to-create-database-client\"\u003eUnable to create database client\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#certificate-issue\"\u003eCertificate Issue\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cem\u003eIssues which can be seeing in setting up development environment\u003c/em\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#config-file-not-found\"\u003eConfig file not found\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#unable-to-create-database-client\"\u003eUnable to create database client\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#certificate-issue\"\u003eCertificate Issue\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"no-space-left-on-device\"\u003eNo space left on device\u003c/h2\u003e\n\n\u003cp\u003eThis error could be caused due to various reasons which includes redundant inodes, bad blocks in your volume or an application which fills your \u003ccode\u003e/\u003c/code\u003e root directory.\nHowever, if you are facing this error after active usage of Haaukins platform you may need to configure your docker volumes path, the content of docker volumes should not be written to \u003ccode\u003e/\u003c/code\u003e root path.\nCheck \u003ca href=\"https://mrturkmen.com/no-space-left-on-device/\"\u003ethis guide\u003c/a\u003e for solving \u003ccode\u003eNo space left on device\u003c/code\u003e error and see whether it is caused due to docker or not.\u003c/p\u003e\n\n\u003cp\u003eThere is another reason that you may face with this error when you are using Haaukins. In the project, we are using \u003ccode\u003eioutil.Tempfile\u003c/code\u003e which is under the hood connected to \u003ccode\u003eos.Tempfile\u003c/code\u003e and if you do not specify first parameter for that function,\nit will use the value of \u003ccode\u003eos.TempDir\u003c/code\u003e as first parameter and it will check and return following values.\u003c/p\u003e\n\n\u003cp\u003eDefinition of how \u003ca href=\"https://golang.org/src/os/file.go?s=11019:11040#L348\"\u003eos.TempDir\u003c/a\u003e` is finding out which directory to use for temporary files.\n\u0026gt;    TempDir returns the default directory to use for temporary files.\n\u0026gt;    On Unix systems, it returns $TMPDIR if non-empty, else /tmp. On Windows,\n\u0026gt;    it uses GetTempPath, returning the first non-empty value from %TMP%, %TEMP%, %USERPROFILE%,\n\u0026gt;    or the Windows directory. On Plan 9, it returns /tmp.\n\u0026gt;    The directory is neither guaranteed to exist nor have accessible permissions.\u003c/p\u003e\n\n\u003cp\u003eIf your \u003ccode\u003e$TMPDIR\u003c/code\u003e not set and you are using linux, then Haaukins will use \u003ccode\u003e/tmp\u003c/code\u003e directory for writing any temporary files.\u003c/p\u003e\n\n\u003cp\u003eYou may need to set it to a place which is generally used for keeping data, e.g \u003ccode\u003e/data/tmp\u003c/code\u003e , rather than \u003ccode\u003e/tmp\u003c/code\u003e under root path.\u003c/p\u003e\n\n\u003cp\u003eIf any of them did not work for you \u003ca href=\"https://github.com/aau-network-security/haaukins/issues/new?assignees=\u0026amp;labels=\u0026amp;template=bug_report.md\u0026amp;title=\"\u003ecreate issue\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAlternatively,symbolic links could be very useful for using a directory which is not under root\u003c/p\u003e\n\n\u003cp\u003eYou can bound a symbolic link to \u003ccode\u003e/tmp\u003c/code\u003e as follows;\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eln -s /data/tmp /tmp \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCreating symbolic link means that the data will actually reside in \u003ccode\u003e/data/tmp\u003c/code\u003e however, the data can be accesible and usable from \u003ccode\u003e/tmp\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"vm-import-failed\"\u003eVM Import failed\u003c/h2\u003e\n\n\u003cp\u003eThis issue can be caused for different reasons, it could be not enough space on the folder where VM will be important or bad VM file (-bad ova file-), in this case some operations should be done in order to fix it.\u003c/p\u003e\n\n\u003ch3 id=\"import-vm-failed-due-to-no-space\"\u003eImport VM failed due to no space\u003c/h3\u003e\n\n\u003cp\u003eIn our case, we have faced with import error which means that when we try to import VM, it failed due to not having space on the server. In this case, an inspection made the reason of failing very clear.\u003c/p\u003e\n\n\u003cp\u003eAll data regarding to VM and other applications stayed on \u003ccode\u003eroot\u003c/code\u003e  path which is not a common case for managing servers. \u003ccode\u003eroot\u003c/code\u003e path should contain essential programs and installations where operating system is requiring or an application which should be under a user\u0026rsquo; home folder. Therefore, \u003ccode\u003eroot\u003c/code\u003e path should be as clean as possible, all related data to an application should be stayed under \u003ccode\u003edata\u003c/code\u003e path/folder.\u003c/p\u003e\n\n\u003cp\u003eExample output of this error:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e10:02AM DBG getting path lock first_time=true path=/\u0026lt;user-daemon-path\u0026gt;/frontends/kali.ova\n10:03AM ERR Error while creating new lab VBoxError [import /\u0026lt;user-daemon-path\u0026gt;/frontends/kali.ova --vsys 0 --vmname kali{ecc3ea71}]: 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\nInterpreting /\u0026lt;user-daemon-path\u0026gt;/frontends/kali.ova...\nOK.\n0%...10%...20%...30%...\nProgress state: VBOX_E_FILE_ERROR\nVBoxManage: error: Appliance import failed\nVBoxManage: error: Could not create the imported medium '/\u0026lt;path-to-vms\u0026gt;/VirtualBox VMs/kali/kali-disk001_2.vmdk'.\nVBoxManage: error: VMDK: cannot write allocated data block in '/\u0026lt;path-to-vms\u0026gt;/VirtualBox VMs/kali/kali-disk001_2.vmdk' (VERR_DISK_FULL)\nVBoxManage: error: Details: code VBOX_E_FILE_ERROR (0x80bb0004), component ApplianceWrap, interface IAppliance\nVBoxManage: error: Context: \u0026quot;RTEXITCODE handleImportAppliance(HandlerArg*)\u0026quot; at line 886 of file VBoxManageAppliance.cpp\nDisks:\n  vmdisk1\t42949672960\t-1\thttp://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized\tkali-disk001.vmdk\t-1\t-1\t\nVirtual system 0:\n 0: Suggested OS type: \u0026quot;Debian_64\u0026quot;\n    (change with \u0026quot;--vsys 0 --ostype \u0026lt;type\u0026gt;\u0026quot;; use \u0026quot;list ostypes\u0026quot; to list all possible values)\n 1: VM name specified with --vmname: \u0026quot;kali{ecc3ea71}\u0026quot;\n 2: Number of CPUs: 2\n    (change with \u0026quot;--vsys 0 --cpus \u0026lt;n\u0026gt;\u0026quot;)\n 3: Guest memory: 1024 MB\n    (change with \u0026quot;--vsys 0 --memory \u0026lt;MB\u0026gt;\u0026quot;)\n 4: Sound card (appliance expects \u0026quot;\u0026quot;, can change on import)\n    (disable with \u0026quot;--vsys 0 --unit 4 --ignore\u0026quot;)\n 5: Network adapter: orig NAT, config 3, extra slot=0;type=NAT\n 6: IDE controller, type PIIX4\n    (disable with \u0026quot;--vsys 0 --unit 6 --ignore\u0026quot;)\n 7: IDE controller, type PIIX4\n    (disable with \u0026quot;--vsys 0 --unit 7 --ignore\u0026quot;)\n 8: Hard disk image: source image=kali-disk001.vmdk, target path=/\u0026lt;path-to-vms\u0026gt;/VirtualBox VMs/kali/kali-disk001_2.vmdk, controller=6;channel=0\n    (change target path with \u0026quot;--vsys 0 --unit 8 --disk path\u0026quot;;\n    disable with \u0026quot;--vsys 0 --unit 8 --ignore\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn order to overcome such a situation, it is always nice to have exclusive data folder for each users on the server where they reside their data regarding to their applications/research.\u003c/p\u003e\n\n\u003ch4 id=\"create-data-folder-for-each-user-on-the-system\"\u003eCreate data folder for each user on the system\u003c/h4\u003e\n\n\u003cp\u003eIn general, servers have data path which is much higher than normal \u003ccode\u003eroot\u003c/code\u003e path. In order to make \u003ccode\u003eroot\u003c/code\u003e path as clean as possible, all data under \u003ccode\u003e/home/${USER}\u003c/code\u003e should be migrated into \u003ccode\u003edata\u003c/code\u003e path\u003c/p\u003e\n\n\u003cp\u003eChanging default home folder can help to overcome the problem.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ sudo su \n$ mkdir /data/${USER}\n$ chown -R ${USER}:${USER} /data/${USER}\n$ usermod -d  /data/${USER} ${USER} # will change default home dir to /data/${USER}\n$ mv /home/${USER}/* /data/${USER}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFollowing bash script could be used automated way of handling the operation.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e#!/bin/bash \n\n# do not include the user who logged in to server \n# make sure that user has admin privileges\n\ndeclare -a users=(\u0026quot;user1\u0026quot; \u0026quot;user2\u0026quot; \u0026quot;user3\u0026quot;)\n\nfor user in \u0026quot;${users[@]}\u0026quot;\ndo\n   mkdir /data/$user\n   chown -R $user:$user /data/$user\n   # or do whatever with individual element of the array\n   usermod -d  /data/$user $user\n   mv /home/$user/* /data/$user\ndone\n\n``````\n\nDo that operations for all users (-except the one who logged in to server-) who consumes a lot of places in terms of data. \n\nAfterwards, there will be no problems regarding to spaces until, `/data` path is full. \n\n\n\n### Import failed due to bad ova file \n\nIt is very clear that the problem is directly related to corrupted ova file, in those cases update ova file with non-corrupted file. \n\n### Import failed due to no permission \n\nIn some cases, permission is denied for importing VMs, in order to overcome, change the permission of the folder where VMs are generated with correct permissions. \n\nPermissions are changed through `chmod` command. \n\nExamples:\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ebash\n$ chmod +rw /vms/\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eIt will add to the permission of `/vms`  write and read permissions. \n\n\n## Config file not found\n\nBasically it clarifies config file is missing, when you are running daemon of Haaukins or from source code, either you need to clarify config file by adding `--config` flag at the end of file. \n\nLike; \n\n`go run main.go --config=/\u0026lt;absolute-path-to-config\u0026gt;/config.yml`]\n\nFor demonized version of Haaukins, you can provide config path after binary such as ; \n\n`\u0026lt;path-to-binary\u0026gt;/hknd --config=/\u0026lt;absolute-path-to-config/config.yml\u0026gt;`  \n\nKeep in mind that Haaukins is looking for config.yml file on the same directory with binary, which means that if config.yml file on the same directory with Haaukins binary, \nthere is no need to provide absolute path of configuration file. \n\n## Guacamole 500 Error \nThis error might happen for some reasons which are;\n\n- VRDE feature is NOT enabled on virtualbox. It needs to be installed by following \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ebash\n   $ VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-5.2.44.vbox-extpack\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e   The version of extension version differs according to version of virtual box that you are having on the server. \n   \n- VM might NOT be active (Not running state, check it)\n\n- Be careful about updating and downgrading the kernel version, it may cause serious headaches \n  Make sure that Docker and Vboxmanage have been installed correctly. \n  \n- For Haaukins specific; check resume functionality on teams to make sure that suspended VMs started without error. \n  If there is an error happened restart VM which throws the error. \n\n\n- Guacamole mysql is NOT able to run. (Crashing) \n\nMysql requires following configuration file to be placed. \n\n - [https://help.directadmin.com/item.php?id=529](https://help.directadmin.com/item.php?id=529)\n \n - [https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_use_native_aio](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_use_native_aio)\n\n\n## Pool overlaps with other one on this address space\n\nThis issue has been resolved completely, the reason of this error was that Haaukins is creating random Docker network, using some common private IP addresses. For instance, when you run docker-compose or a docker container, default docker network will assign an IP address from 192.168 or 172 which are common network range which Docker daemon is using. Haaukins was also using that range to generate random Docker networks, which has been updated from the version [2.4.2](https://github.com/aau-network-security/haaukins/releases/tag/2.4.2) on Haaukins project, the issue resolved.\n\n### Prune System \n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003edocker system prune -f ```\u003c/p\u003e\n\n\u003ch3 id=\"prune-volumes\"\u003ePrune volumes\u003c/h3\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-docker\"\u003e\n\n\n## Unable to create database client\n\nHaving problems regarding to database client might be happened due to certificates error, or not running healthy haaukins-store,\nin these cases there are some things to care of ; \n\n- Ensure haaukins store is running correctly \n  \n  It is always good to be sure about docker status of haaukins store, it can be checked through `docker-compose logs -f` which will feed your stdout with logs, \n  if everything seems ok and no problem, you can close watching logs. If there is an error or something on logs, try to fix it with proper approach. \n  \n- Check version of store and haaukins daemon \n  \n  In some cases, it might be the case where daemon and store do not share same version which means that some functionalities and features might not work. In those cases, \n  client might not be able to create connection with database due to proto file differences. (- contract differences- ) Ensure that versions are matching, like features \n  and functionalities released in both programs. \n  \n- Check certificates \n    \n  Since haaukins and store are using secure gRPC calls, certificates are required to be in place, however certificates which daemon (-for db client-) and store should share \n  same certificates to have a secure gRPC connection. Make sure that there is no problem regarding to certificates. \n  \n- Check ports\n\n  Configuration files for both client and daemon is crucial to run the program correctly, hence, it is good habit to check all values in configuration file. Especially, providing port \n  numbers for store and daemon is quite important for communicating, check out them. If there is no issue regarding to configuration file and if you are still getting error when you run \n  the program, check logs in depth. \n  \n  \n## Certificate Issue\n\nCertificates are crucial for any component of haaukins which provides secure communication between clients and server, for this reason, it is quite important to \nsetup auto-renew of certificates for all domains where haaukins component is using. For a domain where there is no certificate issued yet, following script can help \nto retrieve certificate from Let's Encrypt, before using the script make sure that you are able to add TXT record on domain manager like Cloudflare. \n\nKeep in mind that, `example.domain.com` should be changed with your domain which you would like to get certificate on. \n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ebash\u003c/p\u003e\n\n\u003cp\u003e#!/bin/bash\u003c/p\u003e\n\n\u003ch1 id=\"etc-letsencrypt\"\u003e/etc/letsencrypt\u003c/h1\u003e\n\n\u003ch1 id=\"what-this-is-the-default-configuration-directory-this-is-where-certbot-will-store-all\"\u003eWHAT: This is the default configuration directory. This is where certbot will store all\u003c/h1\u003e\n\n\u003ch1 id=\"generated-keys-and-issues-certificates\"\u003egenerated keys and issues certificates.\u003c/h1\u003e\n\n\u003cp\u003e#\u003c/p\u003e\n\n\u003ch1 id=\"var-lib-letsencrypt\"\u003e/var/lib/letsencrypt\u003c/h1\u003e\n\n\u003ch1 id=\"what-this-is-default-working-directory\"\u003eWHAT: This is default working directory.\u003c/h1\u003e\n\n\u003cp\u003e#\u003c/p\u003e\n\n\u003ch1 id=\"certonly\"\u003ecertonly\u003c/h1\u003e\n\n\u003ch1 id=\"what-this-certbot-subcommand-tells-certbot-to-obtain-the-certificate-but-not-not\"\u003eWHAT: This certbot subcommand tells certbot to obtain the certificate but not not\u003c/h1\u003e\n\n\u003ch1 id=\"install-it-we-don-t-need-to-install-it-because-we-will-be-linking-directly-to-the\"\u003einstall it. We don\u0026rsquo;t need to install it because we will be linking directly to the\u003c/h1\u003e\n\n\u003ch1 id=\"generated-certificate-files-from-within-our-subsequent-nginx-configuration\"\u003egenerated certificate files from within our subsequent nginx configuration.\u003c/h1\u003e\n\n\u003cp\u003e#\u003c/p\u003e\n\n\u003ch1 id=\"d\"\u003e-d\u003c/h1\u003e\n\n\u003ch1 id=\"what-defines-one-of-the-domains-to-be-used-in-the-certificate-we-can-have-up-to-100\"\u003eWHAT: Defines one of the domains to be used in the certificate. We can have up to 100\u003c/h1\u003e\n\n\u003ch1 id=\"domains-in-a-single-certificate-in-this-case-we-re-obtaining-a-wildcard-subdomain\"\u003edomains in a single certificate. In this case, we\u0026rsquo;re obtaining a wildcard-subdomain\u003c/h1\u003e\n\n\u003ch1 id=\"certificate-which-was-just-made-possible-in-addition-to-the-base-domain\"\u003ecertificate (which was just made possible!) in addition to the base domain.\u003c/h1\u003e\n\n\u003cp\u003e#\u003c/p\u003e\n\n\u003ch1 id=\"manual\"\u003e\u0026ndash;manual\u003c/h1\u003e\n\n\u003ch1 id=\"what-tells-certbot-that-we-are-going-to-use-the-manual-plug-in-which-means-we-will\"\u003eWHAT: Tells certbot that we are going to use the \u0026ldquo;manual\u0026rdquo; plug-in, which means we will\u003c/h1\u003e\n\n\u003ch1 id=\"require-interactive-instructions-for-passing-the-authentication-challenge-in-this-case\"\u003erequire interactive instructions for passing the authentication challenge. In this case\u003c/h1\u003e\n\n\u003ch1 id=\"using-dns-we-re-going-to-need-to-know-which-dns-txt-entires-to-create-in-our-domain\"\u003e(using DNS), we\u0026rsquo;re going to need to know which DNS TXT entires to create in our domain\u003c/h1\u003e\n\n\u003ch1 id=\"name-servers\"\u003ename servers.\u003c/h1\u003e\n\n\u003cp\u003e#\u003c/p\u003e\n\n\u003ch1 id=\"preferred-challenges-dns\"\u003e\u0026ndash;preferred-challenges dns\u003c/h1\u003e\n\n\u003ch1 id=\"what-defines-which-of-the-authentication-challenges-we-want-to-implement-with-our\"\u003eWHAT: Defines which of the authentication challenges we want to implement with our\u003c/h1\u003e\n\n\u003ch1 id=\"manual-configuration-steps\"\u003emanual configuration steps.\u003c/h1\u003e\n\n\u003cp\u003e#\u003c/p\u003e\n\n\u003ch1 id=\"server-https-acme-v02-api-letsencrypt-org-directory\"\u003e\u0026ndash;server \u003ca href=\"https://acme-v02.api.letsencrypt.org/directory\"\u003ehttps://acme-v02.api.letsencrypt.org/directory\u003c/a\u003e\u003c/h1\u003e\n\n\u003ch1 id=\"what-the-client-end-point-resource-that-provides-the-actual-certificates-the-v02\"\u003eWHAT: The client end-point / resource that provides the actual certificates. The \u0026ldquo;v02\u0026rdquo;\u003c/h1\u003e\n\n\u003ch1 id=\"end-point-is-the-only-one-capable-of-providing-wildcard-ssl-certificates-at-this-time\"\u003eend-point is the only one capable of providing wildcard SSL certificates at this time,\u003c/h1\u003e\n\n\u003ch1 id=\"ex-example-com\"\u003e(ex, *.example.com).\u003c/h1\u003e\n\n\u003cp\u003e#\ndocker run -it \u0026ndash;rm \u0026ndash;name letsencrypt \u003cbr /\u003e\n    -v \u0026ldquo;/etc/letsencrypt:/etc/letsencrypt\u0026rdquo; \u003cbr /\u003e\n    -v \u0026ldquo;/var/lib/letsencrypt:/var/lib/letsencrypt\u0026rdquo; \u003cbr /\u003e\n    quay.io/letsencrypt/letsencrypt:latest \u003cbr /\u003e\n        certonly \u003cbr /\u003e\n        -d example.domain.com\n        -d *.example.domain.com \u003cbr /\u003e\n        \u0026ndash;manual \u003cbr /\u003e\n        \u0026ndash;preferred-challenges dns \u003cbr /\u003e\n        \u0026ndash;server \u003ca href=\"https://acme-v02.api.letsencrypt.org/directory\"\u003ehttps://acme-v02.api.letsencrypt.org/directory\u003c/a\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\nOnce certificates are retrieved and placed, you have to have auto-renew as cron job or inside a docker environment in order to do not deal \nwith renewing certificates manually all the time. \n\nYou can either download and use `certbot-auto renew` command from directly host or you can perform same thing through docker, \nfor host integration following steps should be enough : \n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ebash\n$ cd /etc/letsencrypt\n$ wget \u003ca href=\"https://dl.eff.org/certbot-auto\"\u003ehttps://dl.eff.org/certbot-auto\u003c/a\u003e \u0026amp;\u0026amp; chmod a+x certbot-auto\n$ ./certbot-auto renew\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\nIt will check certificates and renew them if they are about to expire, you can add that task into cron job. \n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ebash\n$ crontab -e\n0 0 * * 0 cd /etc/letsencrypt/ \u0026amp;\u0026amp; ./certbot-auto renew\n```\u003c/p\u003e\n\n\u003cp\u003eIt will run every week at 00:00 on Sunday.\u003c/p\u003e\n\n\u003cp\u003eFor Docker based approach, similar steps can be achieved as well, there are plenty of examples regarding to it, you may check following approach or create new one;\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/adferrand/dnsrobocert\"\u003ehttps://github.com/adferrand/dnsrobocert\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:14,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""},{id:15,href:"/docs/challenges/",title:"Challenges",description:"Challenges Descriptions",content:""},{id:16,href:"/docs/haaukins/",title:"Haaukins",description:"",content:""},{id:17,href:"/docs/",title:"Docs",description:null,content:""},];index.add(docs);userinput.addEventListener('input',show_results,true);suggestions.addEventListener('click',accept_suggestion,true);function show_results(){var value=this.value;var results=index.search(value,5);var entry,childs=suggestions.childNodes;var i=0,len=results.length;suggestions.classList.remove('d-none');results.forEach(function(page){entry=document.createElement('div');entry.innerHTML='<a href><span></span><span></span></a>';a=entry.querySelector('a'),t=entry.querySelector('span:first-child'),d=entry.querySelector('span:nth-child(2)');a.href=page.href;t.textContent=page.title;d.textContent=page.description;suggestions.appendChild(entry);});while(childs.length>len){suggestions.removeChild(childs[i])}}
function accept_suggestion(){while(suggestions.lastChild){suggestions.removeChild(suggestions.lastChild);}
return false;}}());